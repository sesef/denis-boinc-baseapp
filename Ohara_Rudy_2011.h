/*======================================================================
                                                                        
                      --- DENIS Project ---                             
                        -----------------                               
                                                                        
      Distributed computing                                             
      Electrophysiologycal Models                                       
      Networking colaboration                                           
      In Silico research                                                
      Sharing Knowledge                                                 
                                                                        
------------------------------------------------------------------------
                                                                        
 -- C File of the Ohara_Rudy_2011 model created for the DENIS Project -- 
                                                                        
 This file has been automatically created using the CellML API.         
                                                                        
------------------------------------------------------------------------
                                                                        
 DENIS-CellML2C Copyright 2015 J. Carro; J. Castro                      
                                                                        
 Licensed under the Apache License, Version 2.0 (the "License");      
 you may not use this file except in compliance with the License.       
 You may obtain a copy of the License at                                
                                                                        
 http://www.apache.org/licenses/LICENSE-2.0                             
                                                                        
 Unless required by applicable law or agreed to in writing, software    
 distributed under the License is distributed on an "AS IS" BASIS,    
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        
 implied. See the License for the specific language governing           
 permissions and limitations under the License.                         
                                                                        
------------------------------------------------------------------------
                                                                        
                                                  San Jorge University  
                                                 School of Engineering  
                                                                        
                                                     http://eps.usj.es  
                                                                        
======================================================================*/

using namespace std;

namespace Ohara_Rudy_2011{

	#define ALGEBRAIC_LENGTH 198
	#define STATE_LENGTH 41
	#define CONSTANT_LENGTH 139 

	double* getNewConstantsArray(){return new double[CONSTANT_LENGTH];}
	double* getNewRatesArray(){return new double[STATE_LENGTH];}
	double* getNewStatesArray(){return new double[STATE_LENGTH];}
	double* getNewAlgebraicArray(){return new double[ALGEBRAIC_LENGTH];}
	
	void getNewArrays(double **constants, double **rates, double **states, double **algebraic){
		*constants = getNewConstantsArray();
		*rates     = getNewRatesArray();
		*states    = getNewStatesArray();
		*algebraic = getNewAlgebraicArray();
	}
	
	void getVectorsLength(int* algebraicLength, int* statesLength, int* constantsLength){
		*algebraicLength = ALGEBRAIC_LENGTH;
		*statesLength = STATE_LENGTH;
		*constantsLength = CONSTANT_LENGTH;
	}
	
	int getNameId(const char* variable, const char* component, const char** names, int namesLength){
		int index = -1;
		int counter = 0;
		string completName(variable);
		completName += " in component ";
		completName += component;
		for(int i=0; i < namesLength; i++){
			if(strncmp(completName.c_str(), names[i], (long)completName.length())==0){
				index = i;
				counter++;
			}
		}
		
		switch(counter){
			case 1:
				return index;
			case 0:
				return -1;
			default:
				return -counter;
		}
	}
		
	void names(const char* &VoI, const char** constants, const char** rates, const char** states, const char** algebraic){
		VoI  = "time in component environment (millisecond)";
		constants[0]  = "celltype in component environment (dimensionless)";
		constants[1]  = "nao in component extracellular (millimolar)";
		constants[2]  = "cao in component extracellular (millimolar)";
		constants[3]  = "ko in component extracellular (millimolar)";
		constants[4]  = "R in component physical_constants (joule_per_kilomole_kelvin)";
		constants[5]  = "T in component physical_constants (kelvin)";
		constants[6]  = "F in component physical_constants (coulomb_per_mole)";
		constants[7]  = "zna in component physical_constants (dimensionless)";
		constants[8]  = "zca in component physical_constants (dimensionless)";
		constants[9]  = "zk in component physical_constants (dimensionless)";
		constants[10]  = "L in component cell_geometry (centimeter)";
		constants[11]  = "rad in component cell_geometry (centimeter)";
		constants[104]  = "vcell in component cell_geometry (microliter)";
		constants[113]  = "Ageo in component cell_geometry (centimeter_squared)";
		constants[117]  = "Acap in component cell_geometry (centimeter_squared)";
		constants[118]  = "vmyo in component cell_geometry (microliter)";
		constants[119]  = "vnsr in component cell_geometry (microliter)";
		constants[120]  = "vjsr in component cell_geometry (microliter)";
		constants[121]  = "vss in component cell_geometry (microliter)";
		states[0]  = "v in component membrane (millivolt)";
		algebraic[29]  = "vffrt in component membrane (coulomb_per_mole)";
		algebraic[39]  = "vfrt in component membrane (dimensionless)";
		algebraic[62]  = "INa in component INa (microA_per_microF)";
		algebraic[64]  = "INaL in component INaL (microA_per_microF)";
		algebraic[70]  = "Ito in component Ito (microA_per_microF)";
		algebraic[81]  = "ICaL in component ICaL (microA_per_microF)";
		algebraic[82]  = "ICaNa in component ICaL (microA_per_microF)";
		algebraic[85]  = "ICaK in component ICaL (microA_per_microF)";
		algebraic[96]  = "IKr in component IKr (microA_per_microF)";
		algebraic[98]  = "IKs in component IKs (microA_per_microF)";
		algebraic[100]  = "IK1 in component IK1 (microA_per_microF)";
		algebraic[132]  = "INaCa_i in component INaCa_i (microA_per_microF)";
		algebraic[162]  = "INaCa_ss in component INaCa_i (microA_per_microF)";
		algebraic[181]  = "INaK in component INaK (microA_per_microF)";
		algebraic[184]  = "INab in component INab (microA_per_microF)";
		algebraic[183]  = "IKb in component IKb (microA_per_microF)";
		algebraic[188]  = "IpCa in component IpCa (microA_per_microF)";
		algebraic[186]  = "ICab in component ICab (microA_per_microF)";
		algebraic[12]  = "Istim in component membrane (microA_per_microF)";
		constants[12]  = "amp in component membrane (microA_per_microF)";
		constants[13]  = "duration in component membrane (millisecond)";
		constants[14]  = "KmCaMK in component CaMK (millimolar)";
		constants[15]  = "aCaMK in component CaMK (per_millimolar_per_millisecond)";
		constants[16]  = "bCaMK in component CaMK (per_millisecond)";
		constants[17]  = "CaMKo in component CaMK (dimensionless)";
		constants[18]  = "KmCaM in component CaMK (millimolar)";
		algebraic[45]  = "CaMKb in component CaMK (millimolar)";
		algebraic[47]  = "CaMKa in component CaMK (millimolar)";
		states[1]  = "CaMKt in component CaMK (millimolar)";
		states[2]  = "cass in component intracellular_ions (millimolar)";
		constants[19]  = "cmdnmax_b in component intracellular_ions (millimolar)";
		constants[93]  = "cmdnmax in component intracellular_ions (millimolar)";
		constants[20]  = "kmcmdn in component intracellular_ions (millimolar)";
		constants[21]  = "trpnmax in component intracellular_ions (millimolar)";
		constants[22]  = "kmtrpn in component intracellular_ions (millimolar)";
		constants[23]  = "BSRmax in component intracellular_ions (millimolar)";
		constants[24]  = "KmBSR in component intracellular_ions (millimolar)";
		constants[25]  = "BSLmax in component intracellular_ions (millimolar)";
		constants[26]  = "KmBSL in component intracellular_ions (millimolar)";
		constants[27]  = "csqnmax in component intracellular_ions (millimolar)";
		constants[28]  = "kmcsqn in component intracellular_ions (millimolar)";
		states[3]  = "nai in component intracellular_ions (millimolar)";
		states[4]  = "nass in component intracellular_ions (millimolar)";
		states[5]  = "ki in component intracellular_ions (millimolar)";
		states[6]  = "kss in component intracellular_ions (millimolar)";
		states[7]  = "cansr in component intracellular_ions (millimolar)";
		states[8]  = "cajsr in component intracellular_ions (millimolar)";
		states[9]  = "cai in component intracellular_ions (millimolar)";
		algebraic[187]  = "JdiffNa in component diff (millimolar_per_millisecond)";
		algebraic[189]  = "Jdiff in component diff (millimolar_per_millisecond)";
		algebraic[196]  = "Jup in component SERCA (millimolar_per_millisecond)";
		algebraic[185]  = "JdiffK in component diff (millimolar_per_millisecond)";
		algebraic[191]  = "Jrel in component ryr (millimolar_per_millisecond)";
		algebraic[197]  = "Jtr in component trans_flux (millimolar_per_millisecond)";
		algebraic[49]  = "Bcai in component intracellular_ions (dimensionless)";
		algebraic[53]  = "Bcajsr in component intracellular_ions (dimensionless)";
		algebraic[51]  = "Bcass in component intracellular_ions (dimensionless)";
		constants[29]  = "cm in component intracellular_ions (microF_per_centimeter_squared)";
		constants[30]  = "PKNa in component reversal_potentials (dimensionless)";
		algebraic[56]  = "ENa in component reversal_potentials (millivolt)";
		algebraic[57]  = "EK in component reversal_potentials (millivolt)";
		algebraic[58]  = "EKs in component reversal_potentials (millivolt)";
		algebraic[0]  = "mss in component INa (dimensionless)";
		algebraic[13]  = "tm in component INa (millisecond)";
		constants[31]  = "mssV1 in component INa (millivolt)";
		constants[32]  = "mssV2 in component INa (millivolt)";
		constants[33]  = "mtV1 in component INa (millivolt)";
		constants[34]  = "mtV2 in component INa (millivolt)";
		constants[35]  = "mtD1 in component INa (dimensionless)";
		constants[36]  = "mtD2 in component INa (dimensionless)";
		constants[37]  = "mtV3 in component INa (millivolt)";
		constants[38]  = "mtV4 in component INa (millivolt)";
		states[10]  = "m in component INa (dimensionless)";
		algebraic[1]  = "hss in component INa (dimensionless)";
		algebraic[14]  = "thf in component INa (millisecond)";
		algebraic[15]  = "ths in component INa (millisecond)";
		constants[39]  = "hssV1 in component INa (millivolt)";
		constants[40]  = "hssV2 in component INa (millivolt)";
		constants[94]  = "Ahs in component INa (dimensionless)";
		constants[41]  = "Ahf in component INa (dimensionless)";
		states[11]  = "hf in component INa (dimensionless)";
		states[12]  = "hs in component INa (dimensionless)";
		algebraic[59]  = "h in component INa (dimensionless)";
		constants[42]  = "GNa in component INa (milliS_per_microF)";
		algebraic[16]  = "jss in component INa (dimensionless)";
		algebraic[30]  = "tj in component INa (millisecond)";
		states[13]  = "j in component INa (dimensionless)";
		algebraic[31]  = "hssp in component INa (dimensionless)";
		algebraic[40]  = "thsp in component INa (millisecond)";
		states[14]  = "hsp in component INa (dimensionless)";
		algebraic[60]  = "hp in component INa (dimensionless)";
		algebraic[41]  = "tjp in component INa (millisecond)";
		states[15]  = "jp in component INa (dimensionless)";
		algebraic[61]  = "fINap in component INa (dimensionless)";
		algebraic[32]  = "mLss in component INaL (dimensionless)";
		algebraic[42]  = "tmL in component INaL (millisecond)";
		states[16]  = "mL in component INaL (dimensionless)";
		constants[43]  = "thL in component INaL (millisecond)";
		algebraic[2]  = "hLss in component INaL (dimensionless)";
		states[17]  = "hL in component INaL (dimensionless)";
		algebraic[3]  = "hLssp in component INaL (dimensionless)";
		constants[95]  = "thLp in component INaL (millisecond)";
		states[18]  = "hLp in component INaL (dimensionless)";
		constants[44]  = "GNaL_b in component INaL (milliS_per_microF)";
		constants[96]  = "GNaL in component INaL (milliS_per_microF)";
		algebraic[63]  = "fINaLp in component INaL (dimensionless)";
		constants[45]  = "Gto_b in component Ito (milliS_per_microF)";
		algebraic[4]  = "ass in component Ito (dimensionless)";
		algebraic[17]  = "ta in component Ito (millisecond)";
		states[19]  = "a in component Ito (dimensionless)";
		algebraic[5]  = "iss in component Ito (dimensionless)";
		algebraic[18]  = "delta_epi in component Ito (dimensionless)";
		algebraic[33]  = "tiF_b in component Ito (millisecond)";
		algebraic[43]  = "tiS_b in component Ito (millisecond)";
		algebraic[46]  = "tiF in component Ito (millisecond)";
		algebraic[48]  = "tiS in component Ito (millisecond)";
		algebraic[65]  = "AiF in component Ito (dimensionless)";
		algebraic[66]  = "AiS in component Ito (dimensionless)";
		states[20]  = "iF in component Ito (dimensionless)";
		states[21]  = "iS in component Ito (dimensionless)";
		algebraic[67]  = "i in component Ito (dimensionless)";
		algebraic[34]  = "assp in component Ito (dimensionless)";
		states[22]  = "ap in component Ito (dimensionless)";
		algebraic[50]  = "dti_develop in component Ito (dimensionless)";
		algebraic[52]  = "dti_recover in component Ito (dimensionless)";
		algebraic[54]  = "tiFp in component Ito (millisecond)";
		algebraic[55]  = "tiSp in component Ito (millisecond)";
		states[23]  = "iFp in component Ito (dimensionless)";
		states[24]  = "iSp in component Ito (dimensionless)";
		algebraic[68]  = "ip in component Ito (dimensionless)";
		constants[97]  = "Gto in component Ito (milliS_per_microF)";
		algebraic[69]  = "fItop in component Ito (dimensionless)";
		constants[46]  = "Kmn in component ICaL (millimolar)";
		constants[47]  = "k2n in component ICaL (per_millisecond)";
		constants[48]  = "PCa_b in component ICaL (dimensionless)";
		algebraic[6]  = "dss in component ICaL (dimensionless)";
		states[25]  = "d in component ICaL (dimensionless)";
		algebraic[7]  = "fss in component ICaL (dimensionless)";
		constants[98]  = "Aff in component ICaL (dimensionless)";
		constants[109]  = "Afs in component ICaL (dimensionless)";
		states[26]  = "ff in component ICaL (dimensionless)";
		states[27]  = "fs in component ICaL (dimensionless)";
		algebraic[71]  = "f in component ICaL (dimensionless)";
		algebraic[19]  = "fcass in component ICaL (dimensionless)";
		algebraic[72]  = "Afcaf in component ICaL (dimensionless)";
		algebraic[73]  = "Afcas in component ICaL (dimensionless)";
		states[28]  = "fcaf in component ICaL (dimensionless)";
		states[29]  = "fcas in component ICaL (dimensionless)";
		algebraic[74]  = "fca in component ICaL (dimensionless)";
		states[30]  = "jca in component ICaL (dimensionless)";
		states[31]  = "ffp in component ICaL (dimensionless)";
		algebraic[75]  = "fp in component ICaL (dimensionless)";
		states[32]  = "fcafp in component ICaL (dimensionless)";
		algebraic[76]  = "fcap in component ICaL (dimensionless)";
		algebraic[8]  = "km2n in component ICaL (per_millisecond)";
		algebraic[20]  = "anca in component ICaL (dimensionless)";
		states[33]  = "nca in component ICaL (dimensionless)";
		algebraic[77]  = "PhiCaL in component ICaL (dimensionless)";
		algebraic[78]  = "PhiCaNa in component ICaL (dimensionless)";
		algebraic[79]  = "PhiCaK in component ICaL (dimensionless)";
		constants[99]  = "PCa in component ICaL (dimensionless)";
		constants[110]  = "PCap in component ICaL (dimensionless)";
		constants[111]  = "PCaNa in component ICaL (dimensionless)";
		constants[112]  = "PCaK in component ICaL (dimensionless)";
		constants[115]  = "PCaNap in component ICaL (dimensionless)";
		constants[116]  = "PCaKp in component ICaL (dimensionless)";
		algebraic[80]  = "fICaLp in component ICaL (dimensionless)";
		algebraic[21]  = "td in component ICaL (millisecond)";
		algebraic[22]  = "tff in component ICaL (millisecond)";
		algebraic[23]  = "tfs in component ICaL (millisecond)";
		algebraic[35]  = "tfcaf in component ICaL (millisecond)";
		algebraic[36]  = "tfcas in component ICaL (millisecond)";
		constants[100]  = "tjca in component ICaL (millisecond)";
		algebraic[37]  = "tffp in component ICaL (millisecond)";
		algebraic[44]  = "tfcafp in component ICaL (millisecond)";
		constants[49]  = "GKr_b in component IKr (milliS_per_microF)";
		constants[101]  = "GKr in component IKr (milliS_per_microF)";
		algebraic[9]  = "xrss in component IKr (dimensionless)";
		algebraic[24]  = "txrf in component IKr (millisecond)";
		algebraic[25]  = "txrs in component IKr (millisecond)";
		algebraic[88]  = "Axrf in component IKr (dimensionless)";
		algebraic[91]  = "Axrs in component IKr (dimensionless)";
		states[34]  = "xrf in component IKr (dimensionless)";
		states[35]  = "xrs in component IKr (dimensionless)";
		algebraic[94]  = "xr in component IKr (dimensionless)";
		algebraic[95]  = "rkr in component IKr (dimensionless)";
		constants[50]  = "GKs_b in component IKs (milliS_per_microF)";
		constants[102]  = "GKs in component IKs (milliS_per_microF)";
		algebraic[10]  = "xs1ss in component IKs (dimensionless)";
		algebraic[26]  = "xs2ss in component IKs (dimensionless)";
		algebraic[27]  = "txs1 in component IKs (millisecond)";
		states[36]  = "xs1 in component IKs (dimensionless)";
		states[37]  = "xs2 in component IKs (dimensionless)";
		algebraic[97]  = "KsCa in component IKs (dimensionless)";
		algebraic[38]  = "txs2 in component IKs (millisecond)";
		constants[103]  = "GK1 in component IK1 (milliS_per_microF)";
		constants[51]  = "GK1_b in component IK1 (milliS_per_microF)";
		algebraic[11]  = "xk1ss in component IK1 (dimensionless)";
		algebraic[28]  = "txk1 in component IK1 (millisecond)";
		states[38]  = "xk1 in component IK1 (dimensionless)";
		algebraic[99]  = "rk1 in component IK1 (millisecond)";
		constants[52]  = "kna1 in component INaCa_i (per_millisecond)";
		constants[53]  = "kna2 in component INaCa_i (per_millisecond)";
		constants[54]  = "kna3 in component INaCa_i (per_millisecond)";
		constants[55]  = "kasymm in component INaCa_i (dimensionless)";
		constants[56]  = "wna in component INaCa_i (dimensionless)";
		constants[57]  = "wca in component INaCa_i (dimensionless)";
		constants[58]  = "wnaca in component INaCa_i (dimensionless)";
		constants[59]  = "kcaon in component INaCa_i (per_millisecond)";
		constants[60]  = "kcaoff in component INaCa_i (per_millisecond)";
		constants[61]  = "qna in component INaCa_i (dimensionless)";
		constants[62]  = "qca in component INaCa_i (dimensionless)";
		algebraic[102]  = "hna in component INaCa_i (dimensionless)";
		algebraic[101]  = "hca in component INaCa_i (dimensionless)";
		constants[63]  = "KmCaAct in component INaCa_i (millimolar)";
		constants[64]  = "Gncx_b in component INaCa_i (milliS_per_microF)";
		constants[128]  = "Gncx in component INaCa_i (milliS_per_microF)";
		algebraic[103]  = "h1_i in component INaCa_i (dimensionless)";
		algebraic[104]  = "h2_i in component INaCa_i (dimensionless)";
		algebraic[105]  = "h3_i in component INaCa_i (dimensionless)";
		algebraic[106]  = "h4_i in component INaCa_i (dimensionless)";
		algebraic[107]  = "h5_i in component INaCa_i (dimensionless)";
		algebraic[108]  = "h6_i in component INaCa_i (dimensionless)";
		algebraic[109]  = "h7_i in component INaCa_i (dimensionless)";
		algebraic[110]  = "h8_i in component INaCa_i (dimensionless)";
		algebraic[111]  = "h9_i in component INaCa_i (dimensionless)";
		constants[122]  = "h10_i in component INaCa_i (dimensionless)";
		constants[123]  = "h11_i in component INaCa_i (dimensionless)";
		constants[124]  = "h12_i in component INaCa_i (dimensionless)";
		constants[125]  = "k1_i in component INaCa_i (dimensionless)";
		constants[126]  = "k2_i in component INaCa_i (dimensionless)";
		algebraic[112]  = "k3p_i in component INaCa_i (dimensionless)";
		algebraic[113]  = "k3pp_i in component INaCa_i (dimensionless)";
		algebraic[114]  = "k3_i in component INaCa_i (dimensionless)";
		algebraic[117]  = "k4_i in component INaCa_i (dimensionless)";
		algebraic[115]  = "k4p_i in component INaCa_i (dimensionless)";
		algebraic[116]  = "k4pp_i in component INaCa_i (dimensionless)";
		constants[127]  = "k5_i in component INaCa_i (dimensionless)";
		algebraic[118]  = "k6_i in component INaCa_i (dimensionless)";
		algebraic[119]  = "k7_i in component INaCa_i (dimensionless)";
		algebraic[120]  = "k8_i in component INaCa_i (dimensionless)";
		algebraic[121]  = "x1_i in component INaCa_i (dimensionless)";
		algebraic[122]  = "x2_i in component INaCa_i (dimensionless)";
		algebraic[123]  = "x3_i in component INaCa_i (dimensionless)";
		algebraic[124]  = "x4_i in component INaCa_i (dimensionless)";
		algebraic[125]  = "E1_i in component INaCa_i (dimensionless)";
		algebraic[126]  = "E2_i in component INaCa_i (dimensionless)";
		algebraic[127]  = "E3_i in component INaCa_i (dimensionless)";
		algebraic[128]  = "E4_i in component INaCa_i (dimensionless)";
		algebraic[129]  = "allo_i in component INaCa_i (dimensionless)";
		algebraic[130]  = "JncxNa_i in component INaCa_i (millimolar_per_millisecond)";
		algebraic[131]  = "JncxCa_i in component INaCa_i (millimolar_per_millisecond)";
		algebraic[133]  = "h1_ss in component INaCa_i (dimensionless)";
		algebraic[134]  = "h2_ss in component INaCa_i (dimensionless)";
		algebraic[135]  = "h3_ss in component INaCa_i (dimensionless)";
		algebraic[136]  = "h4_ss in component INaCa_i (dimensionless)";
		algebraic[137]  = "h5_ss in component INaCa_i (dimensionless)";
		algebraic[138]  = "h6_ss in component INaCa_i (dimensionless)";
		algebraic[139]  = "h7_ss in component INaCa_i (dimensionless)";
		algebraic[140]  = "h8_ss in component INaCa_i (dimensionless)";
		algebraic[141]  = "h9_ss in component INaCa_i (dimensionless)";
		constants[129]  = "h10_ss in component INaCa_i (dimensionless)";
		constants[130]  = "h11_ss in component INaCa_i (dimensionless)";
		constants[131]  = "h12_ss in component INaCa_i (dimensionless)";
		constants[132]  = "k1_ss in component INaCa_i (dimensionless)";
		constants[133]  = "k2_ss in component INaCa_i (dimensionless)";
		algebraic[142]  = "k3p_ss in component INaCa_i (dimensionless)";
		algebraic[143]  = "k3pp_ss in component INaCa_i (dimensionless)";
		algebraic[144]  = "k3_ss in component INaCa_i (dimensionless)";
		algebraic[147]  = "k4_ss in component INaCa_i (dimensionless)";
		algebraic[145]  = "k4p_ss in component INaCa_i (dimensionless)";
		algebraic[146]  = "k4pp_ss in component INaCa_i (dimensionless)";
		constants[134]  = "k5_ss in component INaCa_i (dimensionless)";
		algebraic[148]  = "k6_ss in component INaCa_i (dimensionless)";
		algebraic[149]  = "k7_ss in component INaCa_i (dimensionless)";
		algebraic[150]  = "k8_ss in component INaCa_i (dimensionless)";
		algebraic[151]  = "x1_ss in component INaCa_i (dimensionless)";
		algebraic[152]  = "x2_ss in component INaCa_i (dimensionless)";
		algebraic[153]  = "x3_ss in component INaCa_i (dimensionless)";
		algebraic[154]  = "x4_ss in component INaCa_i (dimensionless)";
		algebraic[155]  = "E1_ss in component INaCa_i (dimensionless)";
		algebraic[156]  = "E2_ss in component INaCa_i (dimensionless)";
		algebraic[157]  = "E3_ss in component INaCa_i (dimensionless)";
		algebraic[158]  = "E4_ss in component INaCa_i (dimensionless)";
		algebraic[159]  = "allo_ss in component INaCa_i (dimensionless)";
		algebraic[160]  = "JncxNa_ss in component INaCa_i (millimolar_per_millisecond)";
		algebraic[161]  = "JncxCa_ss in component INaCa_i (millimolar_per_millisecond)";
		constants[65]  = "k1p in component INaK (per_millisecond)";
		constants[66]  = "k1m in component INaK (per_millisecond)";
		constants[67]  = "k2p in component INaK (per_millisecond)";
		constants[68]  = "k2m in component INaK (per_millisecond)";
		constants[69]  = "k3p in component INaK (per_millisecond)";
		constants[70]  = "k3m in component INaK (per_millisecond)";
		constants[71]  = "k4p in component INaK (per_millisecond)";
		constants[72]  = "k4m in component INaK (per_millisecond)";
		constants[73]  = "Knai0 in component INaK (millimolar)";
		constants[74]  = "Knao0 in component INaK (millimolar)";
		constants[75]  = "delta in component INaK (millivolt)";
		constants[76]  = "Kki in component INaK (per_millisecond)";
		constants[77]  = "Kko in component INaK (per_millisecond)";
		constants[78]  = "MgADP in component INaK (millimolar)";
		constants[79]  = "MgATP in component INaK (millimolar)";
		constants[80]  = "Kmgatp in component INaK (millimolar)";
		constants[81]  = "H in component INaK (millimolar)";
		constants[82]  = "eP in component INaK (dimensionless)";
		constants[83]  = "Khp in component INaK (millimolar)";
		constants[84]  = "Knap in component INaK (millimolar)";
		constants[85]  = "Kxkur in component INaK (millimolar)";
		constants[86]  = "Pnak_b in component INaK (milliS_per_microF)";
		constants[138]  = "Pnak in component INaK (milliS_per_microF)";
		algebraic[163]  = "Knai in component INaK (millimolar)";
		algebraic[164]  = "Knao in component INaK (millimolar)";
		algebraic[165]  = "P in component INaK (dimensionless)";
		algebraic[166]  = "a1 in component INaK (dimensionless)";
		constants[135]  = "b1 in component INaK (dimensionless)";
		constants[136]  = "a2 in component INaK (dimensionless)";
		algebraic[167]  = "b2 in component INaK (dimensionless)";
		algebraic[168]  = "a3 in component INaK (dimensionless)";
		algebraic[169]  = "b3 in component INaK (dimensionless)";
		constants[137]  = "a4 in component INaK (dimensionless)";
		algebraic[170]  = "b4 in component INaK (dimensionless)";
		algebraic[171]  = "x1 in component INaK (dimensionless)";
		algebraic[172]  = "x2 in component INaK (dimensionless)";
		algebraic[173]  = "x3 in component INaK (dimensionless)";
		algebraic[174]  = "x4 in component INaK (dimensionless)";
		algebraic[175]  = "E1 in component INaK (dimensionless)";
		algebraic[176]  = "E2 in component INaK (dimensionless)";
		algebraic[177]  = "E3 in component INaK (dimensionless)";
		algebraic[178]  = "E4 in component INaK (dimensionless)";
		algebraic[179]  = "JnakNa in component INaK (millimolar_per_millisecond)";
		algebraic[180]  = "JnakK in component INaK (millimolar_per_millisecond)";
		algebraic[182]  = "xkb in component IKb (dimensionless)";
		constants[87]  = "GKb_b in component IKb (milliS_per_microF)";
		constants[105]  = "GKb in component IKb (milliS_per_microF)";
		constants[88]  = "PNab in component INab (milliS_per_microF)";
		constants[89]  = "PCab in component ICab (milliS_per_microF)";
		constants[90]  = "GpCa in component IpCa (milliS_per_microF)";
		constants[91]  = "KmCap in component IpCa (millimolar)";
		constants[92]  = "bt in component ryr (millisecond)";
		constants[106]  = "a_rel in component ryr (millisecond)";
		algebraic[86]  = "Jrel_inf in component ryr (dimensionless)";
		algebraic[92]  = "tau_rel in component ryr (millisecond)";
		algebraic[87]  = "Jrel_infp in component ryr (dimensionless)";
		algebraic[84]  = "Jrel_temp in component ryr (dimensionless)";
		algebraic[93]  = "tau_relp in component ryr (millisecond)";
		states[39]  = "Jrelnp in component ryr (dimensionless)";
		states[40]  = "Jrelp in component ryr (dimensionless)";
		constants[107]  = "btp in component ryr (millisecond)";
		constants[114]  = "a_relp in component ryr (millisecond)";
		algebraic[83]  = "Jrel_inf_temp in component ryr (dimensionless)";
		algebraic[190]  = "fJrelp in component ryr (dimensionless)";
		algebraic[89]  = "tau_rel_temp in component ryr (millisecond)";
		algebraic[90]  = "tau_relp_temp in component ryr (millisecond)";
		constants[108]  = "upScale in component SERCA (dimensionless)";
		algebraic[192]  = "Jupnp in component SERCA (millimolar_per_millisecond)";
		algebraic[193]  = "Jupp in component SERCA (millimolar_per_millisecond)";
		algebraic[194]  = "fJupp in component SERCA (dimensionless)";
		algebraic[195]  = "Jleak in component SERCA (millimolar_per_millisecond)";
		rates[0]  = "d/dt v in component membrane (millivolt)";
		rates[1]  = "d/dt CaMKt in component CaMK (millimolar)";
		rates[3]  = "d/dt nai in component intracellular_ions (millimolar)";
		rates[4]  = "d/dt nass in component intracellular_ions (millimolar)";
		rates[5]  = "d/dt ki in component intracellular_ions (millimolar)";
		rates[6]  = "d/dt kss in component intracellular_ions (millimolar)";
		rates[9]  = "d/dt cai in component intracellular_ions (millimolar)";
		rates[2]  = "d/dt cass in component intracellular_ions (millimolar)";
		rates[7]  = "d/dt cansr in component intracellular_ions (millimolar)";
		rates[8]  = "d/dt cajsr in component intracellular_ions (millimolar)";
		rates[10]  = "d/dt m in component INa (dimensionless)";
		rates[11]  = "d/dt hf in component INa (dimensionless)";
		rates[12]  = "d/dt hs in component INa (dimensionless)";
		rates[13]  = "d/dt j in component INa (dimensionless)";
		rates[14]  = "d/dt hsp in component INa (dimensionless)";
		rates[15]  = "d/dt jp in component INa (dimensionless)";
		rates[16]  = "d/dt mL in component INaL (dimensionless)";
		rates[17]  = "d/dt hL in component INaL (dimensionless)";
		rates[18]  = "d/dt hLp in component INaL (dimensionless)";
		rates[19]  = "d/dt a in component Ito (dimensionless)";
		rates[20]  = "d/dt iF in component Ito (dimensionless)";
		rates[21]  = "d/dt iS in component Ito (dimensionless)";
		rates[22]  = "d/dt ap in component Ito (dimensionless)";
		rates[23]  = "d/dt iFp in component Ito (dimensionless)";
		rates[24]  = "d/dt iSp in component Ito (dimensionless)";
		rates[25]  = "d/dt d in component ICaL (dimensionless)";
		rates[26]  = "d/dt ff in component ICaL (dimensionless)";
		rates[27]  = "d/dt fs in component ICaL (dimensionless)";
		rates[28]  = "d/dt fcaf in component ICaL (dimensionless)";
		rates[29]  = "d/dt fcas in component ICaL (dimensionless)";
		rates[30]  = "d/dt jca in component ICaL (dimensionless)";
		rates[31]  = "d/dt ffp in component ICaL (dimensionless)";
		rates[32]  = "d/dt fcafp in component ICaL (dimensionless)";
		rates[33]  = "d/dt nca in component ICaL (dimensionless)";
		rates[34]  = "d/dt xrf in component IKr (dimensionless)";
		rates[35]  = "d/dt xrs in component IKr (dimensionless)";
		rates[36]  = "d/dt xs1 in component IKs (dimensionless)";
		rates[37]  = "d/dt xs2 in component IKs (dimensionless)";
		rates[38]  = "d/dt xk1 in component IK1 (dimensionless)";
		rates[39]  = "d/dt Jrelnp in component ryr (dimensionless)";
		rates[40]  = "d/dt Jrelp in component ryr (dimensionless)";
	}

	void initConsts(double* constants, double* states){
		constants[0] = 0;
		constants[1] = 140;
		constants[2] = 1.8;
		constants[3] = 5.4;
		constants[4] = 8314;
		constants[5] = 310;
		constants[6] = 96485;
		constants[7] = 1;
		constants[8] = 2;
		constants[9] = 1;
		constants[10] = 0.01;
		constants[11] = 0.0011;
		states[0] = -87;
		constants[12] = -80;
		constants[13] = 0.5;
		constants[14] = 0.15;
		constants[15] = 0.05;
		constants[16] = 0.00068;
		constants[17] = 0.05;
		constants[18] = 0.0015;
		states[1] = 0;
		states[2] = 1e-4;
		constants[19] = 0.05;
		constants[20] = 0.00238;
		constants[21] = 0.07;
		constants[22] = 0.0005;
		constants[23] = 0.047;
		constants[24] = 0.00087;
		constants[25] = 1.124;
		constants[26] = 0.0087;
		constants[27] = 10;
		constants[28] = 0.8;
		states[3] = 7;
		states[4] = 7;
		states[5] = 145;
		states[6] = 145;
		states[7] = 1.2;
		states[8] = 1.2;
		states[9] = 1e-4;
		constants[29] = 1;
		constants[30] = 0.01833;
		constants[31] = 39.57;
		constants[32] = 9.871;
		constants[33] = 11.64;
		constants[34] = 34.77;
		constants[35] = 6.765;
		constants[36] = 8.552;
		constants[37] = 77.42;
		constants[38] = 5.955;
		states[10] = 0;
		constants[39] = 82.9;
		constants[40] = 6.086;
		constants[41] = 0.99;
		states[11] = 1;
		states[12] = 1;
		constants[42] = 75;
		states[13] = 1;
		states[14] = 1;
		states[15] = 1;
		states[16] = 0;
		constants[43] = 200;
		states[17] = 1;
		states[18] = 1;
		constants[44] = 0.0075;
		constants[45] = 0.02;
		states[19] = 0;
		states[20] = 1;
		states[21] = 1;
		states[22] = 0;
		states[23] = 1;
		states[24] = 1;
		constants[46] = 0.002;
		constants[47] = 1000;
		constants[48] = 0.0001;
		states[25] = 0;
		states[26] = 1;
		states[27] = 1;
		states[28] = 1;
		states[29] = 1;
		states[30] = 1;
		states[31] = 1;
		states[32] = 1;
		states[33] = 0;
		constants[49] = 0.046;
		states[34] = 0;
		states[35] = 0;
		constants[50] = 0.0034;
		states[36] = 0;
		states[37] = 0;
		constants[51] = 0.1908;
		states[38] = 1;
		constants[52] = 15;
		constants[53] = 5;
		constants[54] = 88.12;
		constants[55] = 12.5;
		constants[56] = 6e4;
		constants[57] = 6e4;
		constants[58] = 5e3;
		constants[59] = 1.5e6;
		constants[60] = 5e3;
		constants[61] = 0.5224;
		constants[62] = 0.167;
		constants[63] = 150e-6;
		constants[64] = 0.0008;
		constants[65] = 949.5;
		constants[66] = 182.4;
		constants[67] = 687.2;
		constants[68] = 39.4;
		constants[69] = 1899;
		constants[70] = 79300;
		constants[71] = 639;
		constants[72] = 40;
		constants[73] = 9.073;
		constants[74] = 27.78;
		constants[75] = -0.155;
		constants[76] = 0.5;
		constants[77] = 0.3582;
		constants[78] = 0.05;
		constants[79] = 9.8;
		constants[80] = 1.698e-7;
		constants[81] = 1e-7;
		constants[82] = 4.2;
		constants[83] = 1.698e-7;
		constants[84] = 224;
		constants[85] = 292;
		constants[86] = 30;
		constants[87] = 0.003;
		constants[88] = 3.75e-10;
		constants[89] = 2.5e-8;
		constants[90] = 0.0005;
		constants[91] = 0.0005;
		constants[92] = 4.75;
		states[39] = 0;
		states[40] = 0;
		constants[93] = (constants[0]==1.00000 ?  constants[19]*1.30000 : constants[19]);
		constants[94] = 1.00000 - constants[41];
		constants[95] =  3.00000*constants[43];
		constants[96] = (constants[0]==1.00000 ?  constants[44]*0.600000 : constants[44]);
		constants[97] = (constants[0]==1.00000 ?  constants[45]*4.00000 : constants[0]==2.00000 ?  constants[45]*4.00000 : constants[45]);
		constants[98] = 0.600000;
		constants[99] = (constants[0]==1.00000 ?  constants[48]*1.20000 : constants[0]==2.00000 ?  constants[48]*2.50000 : constants[48]);
		constants[100] = 75.0000;
		constants[101] = (constants[0]==1.00000 ?  constants[49]*1.30000 : constants[0]==2.00000 ?  constants[49]*0.800000 : constants[49]);
		constants[102] = (constants[0]==1.00000 ?  constants[50]*1.40000 : constants[50]);
		constants[103] = (constants[0]==1.00000 ?  constants[51]*1.20000 : constants[0]==2.00000 ?  constants[51]*1.30000 : constants[51]);
		constants[104] =  1000.00*3.14000*constants[11]*constants[11]*constants[10];
		constants[105] = (constants[0]==1.00000 ?  constants[87]*0.600000 : constants[87]);
		constants[106] =  0.500000*constants[92];
		constants[107] =  1.25000*constants[92];
		constants[108] = (constants[0]==1.00000 ? 1.30000 : 1.00000);
		constants[109] = 1.00000 - constants[98];
		constants[110] =  1.10000*constants[99];
		constants[111] =  0.00125000*constants[99];
		constants[112] =  0.000357400*constants[99];
		constants[113] =  2.00000*3.14000*constants[11]*constants[11]+ 2.00000*3.14000*constants[11]*constants[10];
		constants[114] =  0.500000*constants[107];
		constants[115] =  0.00125000*constants[110];
		constants[116] =  0.000357400*constants[110];
		constants[117] =  2.00000*constants[113];
		constants[118] =  0.680000*constants[104];
		constants[119] =  0.0552000*constants[104];
		constants[120] =  0.00480000*constants[104];
		constants[121] =  0.0200000*constants[104];
		constants[122] = constants[55]+1.00000+ (constants[1]/constants[52])*(1.00000+constants[1]/constants[53]);
		constants[123] = ( constants[1]*constants[1])/( constants[122]*constants[52]*constants[53]);
		constants[124] = 1.00000/constants[122];
		constants[125] =  constants[124]*constants[2]*constants[59];
		constants[126] = constants[60];
		constants[127] = constants[60];
		constants[128] = (constants[0]==1.00000 ?  constants[64]*1.10000 : constants[0]==2.00000 ?  constants[64]*1.40000 : constants[64]);
		constants[129] = constants[55]+1.00000+ (constants[1]/constants[52])*(1.00000+constants[1]/constants[53]);
		constants[130] = ( constants[1]*constants[1])/( constants[129]*constants[52]*constants[53]);
		constants[131] = 1.00000/constants[129];
		constants[132] =  constants[131]*constants[2]*constants[59];
		constants[133] = constants[60];
		constants[134] = constants[60];
		constants[135] =  constants[66]*constants[78];
		constants[136] = constants[67];
		constants[137] = (( constants[71]*constants[79])/constants[80])/(1.00000+constants[79]/constants[80]);
		constants[138] = (constants[0]==1.00000 ?  constants[86]*0.900000 : constants[0]==2.00000 ?  constants[86]*0.700000 : constants[86]);
	}

	void computeRates(double VoI, double* constants, double* rates, double* states, double* algebraic){
		algebraic[2] = 1.00000/(1.00000+exp((states[0]+87.6100)/7.48800));
		rates[17] = (algebraic[2] - states[17])/constants[43];
		algebraic[3] = 1.00000/(1.00000+exp((states[0]+93.8100)/7.48800));
		rates[18] = (algebraic[3] - states[18])/constants[95];
		algebraic[0] = 1.00000/(1.00000+exp(- (states[0]+constants[31])/constants[32]));
		algebraic[13] = 1.00000/( constants[35]*exp((states[0]+constants[33])/constants[34])+ constants[36]*exp(- (states[0]+constants[37])/constants[38]));
		rates[10] = (algebraic[0] - states[10])/algebraic[13];
		algebraic[1] = 1.00000/(1.00000+exp((states[0]+constants[39])/constants[40]));
		algebraic[14] = 1.00000/( 1.43200e-05*exp(- (states[0]+1.19600)/6.28500)+ 6.14900*exp((states[0]+0.509600)/20.2700));
		rates[11] = (algebraic[1] - states[11])/algebraic[14];
		algebraic[15] = 1.00000/( 0.00979400*exp(- (states[0]+17.9500)/28.0500)+ 0.334300*exp((states[0]+5.73000)/56.6600));
		rates[12] = (algebraic[1] - states[12])/algebraic[15];
		algebraic[4] = 1.00000/(1.00000+exp(- (states[0] - 14.3400)/14.8200));
		algebraic[17] = 1.05150/(1.00000/( 1.20890*(1.00000+exp(- (states[0] - 18.4099)/29.3814)))+3.50000/(1.00000+exp((states[0]+100.000)/29.3814)));
		rates[19] = (algebraic[4] - states[19])/algebraic[17];
		algebraic[6] = 1.00000/(1.00000+exp(- (states[0]+3.94000)/4.23000));
		algebraic[21] = 0.600000+1.00000/(exp( - 0.0500000*(states[0]+6.00000))+exp( 0.0900000*(states[0]+14.0000)));
		rates[25] = (algebraic[6] - states[25])/algebraic[21];
		algebraic[7] = 1.00000/(1.00000+exp((states[0]+19.5800)/3.69600));
		algebraic[22] = 7.00000+1.00000/( 0.00450000*exp(- (states[0]+20.0000)/10.0000)+ 0.00450000*exp((states[0]+20.0000)/10.0000));
		rates[26] = (algebraic[7] - states[26])/algebraic[22];
		algebraic[23] = 1000.00+1.00000/( 3.50000e-05*exp(- (states[0]+5.00000)/4.00000)+ 3.50000e-05*exp((states[0]+5.00000)/6.00000));
		rates[27] = (algebraic[7] - states[27])/algebraic[23];
		algebraic[19] = algebraic[7];
		rates[30] = (algebraic[19] - states[30])/constants[100];
		algebraic[8] =  states[30]*1.00000;
		algebraic[20] = 1.00000/(constants[47]/algebraic[8]+pow(1.00000+constants[46]/states[2], 4.00000));
		rates[33] =  algebraic[20]*constants[47] -  states[33]*algebraic[8];
		algebraic[9] = 1.00000/(1.00000+exp(- (states[0]+8.33700)/6.78900));
		algebraic[24] = 12.9800+1.00000/( 0.365200*exp((states[0] - 31.6600)/3.86900)+ 4.12300e-05*exp(- (states[0] - 47.7800)/20.3800));
		rates[34] = (algebraic[9] - states[34])/algebraic[24];
		algebraic[25] = 1.86500+1.00000/( 0.0662900*exp((states[0] - 34.7000)/7.35500)+ 1.12800e-05*exp(- (states[0] - 29.7400)/25.9400));
		rates[35] = (algebraic[9] - states[35])/algebraic[25];
		algebraic[10] = 1.00000/(1.00000+exp(- (states[0]+11.6000)/8.93200));
		algebraic[27] = 817.300+1.00000/( 0.000232600*exp((states[0]+48.2800)/17.8000)+ 0.00129200*exp(- (states[0]+210.000)/230.000));
		rates[36] = (algebraic[10] - states[36])/algebraic[27];
		algebraic[11] = 1.00000/(1.00000+exp(- (states[0]+ 2.55380*constants[3]+144.590)/( 1.56920*constants[3]+3.81150)));
		algebraic[28] = 122.200/(exp(- (states[0]+127.200)/20.3600)+exp((states[0]+236.800)/69.3300));
		rates[38] = (algebraic[11] - states[38])/algebraic[28];
		algebraic[16] = algebraic[1];
		algebraic[30] = 2.03800+1.00000/( 0.0213600*exp(- (states[0]+100.600)/8.28100)+ 0.305200*exp((states[0]+0.994100)/38.4500));
		rates[13] = (algebraic[16] - states[13])/algebraic[30];
		algebraic[34] = 1.00000/(1.00000+exp(- (states[0] - 24.3400)/14.8200));
		rates[22] = (algebraic[34] - states[22])/algebraic[17];
		algebraic[35] = 7.00000+1.00000/( 0.0400000*exp(- (states[0] - 4.00000)/7.00000)+ 0.0400000*exp((states[0] - 4.00000)/7.00000));
		rates[28] = (algebraic[19] - states[28])/algebraic[35];
		algebraic[36] = 100.000+1.00000/( 0.000120000*exp(- states[0]/3.00000)+ 0.000120000*exp(states[0]/7.00000));
		rates[29] = (algebraic[19] - states[29])/algebraic[36];
		algebraic[37] =  2.50000*algebraic[22];
		rates[31] = (algebraic[7] - states[31])/algebraic[37];
		algebraic[26] = algebraic[10];
		algebraic[38] = 1.00000/( 0.0100000*exp((states[0] - 50.0000)/20.0000)+ 0.0193000*exp(- (states[0]+66.5400)/31.0000));
		rates[37] = (algebraic[26] - states[37])/algebraic[38];
		algebraic[45] = ( constants[17]*(1.00000 - states[1]))/(1.00000+constants[18]/states[2]);
		rates[1] =  constants[15]*algebraic[45]*(algebraic[45]+states[1]) -  constants[16]*states[1];
		algebraic[31] = 1.00000/(1.00000+exp((states[0]+89.1000)/6.08600));
		algebraic[40] =  3.00000*algebraic[15];
		rates[14] = (algebraic[31] - states[14])/algebraic[40];
		algebraic[41] =  1.46000*algebraic[30];
		rates[15] = (algebraic[16] - states[15])/algebraic[41];
		algebraic[32] = 1.00000/(1.00000+exp(- (states[0]+42.8500)/5.26400));
		algebraic[42] = algebraic[13];
		rates[16] = (algebraic[32] - states[16])/algebraic[42];
		algebraic[44] =  2.50000*algebraic[35];
		rates[32] = (algebraic[19] - states[32])/algebraic[44];
		algebraic[5] = 1.00000/(1.00000+exp((states[0]+43.9400)/5.71100));
		algebraic[18] = (constants[0]==1.00000 ? 1.00000 - 0.950000/(1.00000+exp((states[0]+70.0000)/5.00000)) : 1.00000);
		algebraic[33] = 4.56200+1.00000/( 0.393300*exp(- (states[0]+100.000)/100.000)+ 0.0800400*exp((states[0]+50.0000)/16.5900));
		algebraic[46] =  algebraic[33]*algebraic[18];
		rates[20] = (algebraic[5] - states[20])/algebraic[46];
		algebraic[43] = 23.6200+1.00000/( 0.00141600*exp(- (states[0]+96.5200)/59.0500)+ 1.78000e-08*exp((states[0]+114.100)/8.07900));
		algebraic[48] =  algebraic[43]*algebraic[18];
		rates[21] = (algebraic[5] - states[21])/algebraic[48];
		algebraic[50] = 1.35400+0.000100000/(exp((states[0] - 167.400)/15.8900)+exp(- (states[0] - 12.2300)/0.215400));
		algebraic[52] = 1.00000 - 0.500000/(1.00000+exp((states[0]+70.0000)/20.0000));
		algebraic[54] =  algebraic[50]*algebraic[52]*algebraic[46];
		rates[23] = (algebraic[5] - states[23])/algebraic[54];
		algebraic[55] =  algebraic[50]*algebraic[52]*algebraic[48];
		rates[24] = (algebraic[5] - states[24])/algebraic[55];
		algebraic[71] =  constants[98]*states[26]+ constants[109]*states[27];
		algebraic[72] = 0.300000+0.600000/(1.00000+exp((states[0] - 10.0000)/10.0000));
		algebraic[73] = 1.00000 - algebraic[72];
		algebraic[74] =  algebraic[72]*states[28]+ algebraic[73]*states[29];
		algebraic[75] =  constants[98]*states[31]+ constants[109]*states[27];
		algebraic[76] =  algebraic[72]*states[32]+ algebraic[73]*states[29];
		algebraic[29] = ( states[0]*constants[6]*constants[6])/( constants[4]*constants[5]);
		algebraic[39] = ( states[0]*constants[6])/( constants[4]*constants[5]);
		algebraic[77] = ( 4.00000*algebraic[29]*( states[2]*exp( 2.00000*algebraic[39]) -  0.341000*constants[2]))/(exp( 2.00000*algebraic[39]) - 1.00000);
		algebraic[47] = algebraic[45]+states[1];
		algebraic[80] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[81] =  (1.00000 - algebraic[80])*constants[99]*algebraic[77]*states[25]*( algebraic[71]*(1.00000 - states[33])+ states[30]*algebraic[74]*states[33])+ algebraic[80]*constants[110]*algebraic[77]*states[25]*( algebraic[75]*(1.00000 - states[33])+ states[30]*algebraic[76]*states[33]);
		algebraic[83] = ( constants[106]*- algebraic[81])/(1.00000+ 1.00000*pow(1.50000/states[8], 8.00000));
		algebraic[86] = (constants[0]==2.00000 ?  algebraic[83]*1.70000 : algebraic[83]);
		algebraic[89] = constants[92]/(1.00000+0.0123000/states[8]);
		algebraic[92] = (algebraic[89]<0.00100000 ? 0.00100000 : algebraic[89]);
		rates[39] = (algebraic[86] - states[39])/algebraic[92];
		algebraic[84] = ( constants[114]*- algebraic[81])/(1.00000+pow(1.50000/states[8], 8.00000));
		algebraic[87] = (constants[0]==2.00000 ?  algebraic[84]*1.70000 : algebraic[84]);
		algebraic[90] = constants[107]/(1.00000+0.0123000/states[8]);
		algebraic[93] = (algebraic[90]<0.00100000 ? 0.00100000 : algebraic[90]);
		rates[40] = (algebraic[87] - states[40])/algebraic[93];
		algebraic[57] =  (( constants[4]*constants[5])/constants[6])*log(constants[3]/states[5]);
		algebraic[65] = 1.00000/(1.00000+exp((states[0] - 213.600)/151.200));
		algebraic[66] = 1.00000 - algebraic[65];
		algebraic[67] =  algebraic[65]*states[20]+ algebraic[66]*states[21];
		algebraic[68] =  algebraic[65]*states[23]+ algebraic[66]*states[24];
		algebraic[69] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[70] =  constants[97]*(states[0] - algebraic[57])*( (1.00000 - algebraic[69])*states[19]*algebraic[67]+ algebraic[69]*states[22]*algebraic[68]);
		algebraic[88] = 1.00000/(1.00000+exp((states[0]+54.8100)/38.2100));
		algebraic[91] = 1.00000 - algebraic[88];
		algebraic[94] =  algebraic[88]*states[34]+ algebraic[91]*states[35];
		algebraic[95] = ( (1.00000/(1.00000+exp((states[0]+55.0000)/75.0000)))*1.00000)/(1.00000+exp((states[0] - 10.0000)/30.0000));
		algebraic[96] =  constants[101]* pow((constants[3]/5.40000), 1.0 / 2)*algebraic[94]*algebraic[95]*(states[0] - algebraic[57]);
		algebraic[58] =  (( constants[4]*constants[5])/constants[6])*log((constants[3]+ constants[30]*constants[1])/(states[5]+ constants[30]*states[3]));
		algebraic[97] = 1.00000+0.600000/(1.00000+pow(3.80000e-05/states[9], 1.40000));
		algebraic[98] =  constants[102]*algebraic[97]*states[36]*states[37]*(states[0] - algebraic[58]);
		algebraic[99] = 1.00000/(1.00000+exp(((states[0]+105.800) -  2.60000*constants[3])/9.49300));
		algebraic[100] =  constants[103]* pow(constants[3], 1.0 / 2)*algebraic[99]*states[38]*(states[0] - algebraic[57]);
		algebraic[164] =  constants[74]*exp(( (1.00000 - constants[75])*states[0]*constants[6])/( 3.00000*constants[4]*constants[5]));
		algebraic[168] = ( constants[69]*pow(constants[3]/constants[77], 2.00000))/((pow(1.00000+constants[1]/algebraic[164], 3.00000)+pow(1.00000+constants[3]/constants[77], 2.00000)) - 1.00000);
		algebraic[165] = constants[82]/(1.00000+constants[81]/constants[83]+states[3]/constants[84]+states[5]/constants[85]);
		algebraic[169] = ( constants[70]*algebraic[165]*constants[81])/(1.00000+constants[79]/constants[80]);
		algebraic[163] =  constants[73]*exp(( constants[75]*states[0]*constants[6])/( 3.00000*constants[4]*constants[5]));
		algebraic[166] = ( constants[65]*pow(states[3]/algebraic[163], 3.00000))/((pow(1.00000+states[3]/algebraic[163], 3.00000)+pow(1.00000+states[5]/constants[76], 2.00000)) - 1.00000);
		algebraic[167] = ( constants[68]*pow(constants[1]/algebraic[164], 3.00000))/((pow(1.00000+constants[1]/algebraic[164], 3.00000)+pow(1.00000+constants[3]/constants[77], 2.00000)) - 1.00000);
		algebraic[170] = ( constants[72]*pow(states[5]/constants[76], 2.00000))/((pow(1.00000+states[3]/algebraic[163], 3.00000)+pow(1.00000+states[5]/constants[76], 2.00000)) - 1.00000);
		algebraic[171] =  constants[137]*algebraic[166]*constants[136]+ algebraic[167]*algebraic[170]*algebraic[169]+ constants[136]*algebraic[170]*algebraic[169]+ algebraic[169]*algebraic[166]*constants[136];
		algebraic[172] =  algebraic[167]*constants[135]*algebraic[170]+ algebraic[166]*constants[136]*algebraic[168]+ algebraic[168]*constants[135]*algebraic[170]+ constants[136]*algebraic[168]*algebraic[170];
		algebraic[173] =  constants[136]*algebraic[168]*constants[137]+ algebraic[169]*algebraic[167]*constants[135]+ algebraic[167]*constants[135]*constants[137]+ algebraic[168]*constants[137]*constants[135];
		algebraic[174] =  algebraic[170]*algebraic[169]*algebraic[167]+ algebraic[168]*constants[137]*algebraic[166]+ algebraic[167]*constants[137]*algebraic[166]+ algebraic[169]*algebraic[167]*algebraic[166];
		algebraic[175] = algebraic[171]/(algebraic[171]+algebraic[172]+algebraic[173]+algebraic[174]);
		algebraic[176] = algebraic[172]/(algebraic[171]+algebraic[172]+algebraic[173]+algebraic[174]);
		algebraic[179] =  3.00000*( algebraic[175]*algebraic[168] -  algebraic[176]*algebraic[169]);
		algebraic[177] = algebraic[173]/(algebraic[171]+algebraic[172]+algebraic[173]+algebraic[174]);
		algebraic[178] = algebraic[174]/(algebraic[171]+algebraic[172]+algebraic[173]+algebraic[174]);
		algebraic[180] =  2.00000*( algebraic[178]*constants[135] -  algebraic[177]*algebraic[166]);
		algebraic[181] =  constants[138]*( constants[7]*algebraic[179]+ constants[9]*algebraic[180]);
		algebraic[182] = 1.00000/(1.00000+exp(- (states[0] - 14.4800)/18.3400));
		algebraic[183] =  constants[105]*algebraic[182]*(states[0] - algebraic[57]);
		algebraic[12] = (VoI<=constants[13] ? constants[12] : 0.00000);
		algebraic[185] = (states[6] - states[5])/2.00000;
		rates[5] = ( - ((algebraic[70]+algebraic[96]+algebraic[98]+algebraic[100]+algebraic[183]+algebraic[12]) -  2.00000*algebraic[181])*constants[29]*constants[117])/( constants[6]*constants[118])+( algebraic[185]*constants[121])/constants[118];
		algebraic[79] = ( 1.00000*algebraic[29]*( 0.750000*states[6]*exp( 1.00000*algebraic[39]) -  0.750000*constants[3]))/(exp( 1.00000*algebraic[39]) - 1.00000);
		algebraic[85] =  (1.00000 - algebraic[80])*constants[112]*algebraic[79]*states[25]*( algebraic[71]*(1.00000 - states[33])+ states[30]*algebraic[74]*states[33])+ algebraic[80]*constants[116]*algebraic[79]*states[25]*( algebraic[75]*(1.00000 - states[33])+ states[30]*algebraic[76]*states[33]);
		rates[6] = ( - algebraic[85]*constants[29]*constants[117])/( constants[6]*constants[121]) - algebraic[185];
		algebraic[56] =  (( constants[4]*constants[5])/constants[6])*log(constants[1]/states[3]);
		algebraic[59] =  constants[41]*states[11]+ constants[94]*states[12];
		algebraic[60] =  constants[41]*states[11]+ constants[94]*states[14];
		algebraic[61] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[62] =  constants[42]*(states[0] - algebraic[56])*pow(states[10], 3.00000)*( (1.00000 - algebraic[61])*algebraic[59]*states[13]+ algebraic[61]*algebraic[60]*states[15]);
		algebraic[63] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[64] =  constants[96]*(states[0] - algebraic[56])*states[16]*( (1.00000 - algebraic[63])*states[17]+ algebraic[63]*states[18]);
		algebraic[129] = 1.00000/(1.00000+pow(constants[63]/states[9], 2.00000));
		algebraic[102] = exp(( constants[61]*states[0]*constants[6])/( constants[4]*constants[5]));
		algebraic[109] = 1.00000+ (constants[1]/constants[54])*(1.00000+1.00000/algebraic[102]);
		algebraic[110] = constants[1]/( constants[54]*algebraic[102]*algebraic[109]);
		algebraic[113] =  algebraic[110]*constants[58];
		algebraic[103] = 1.00000+ (states[3]/constants[54])*(1.00000+algebraic[102]);
		algebraic[104] = ( states[3]*algebraic[102])/( constants[54]*algebraic[103]);
		algebraic[116] =  algebraic[104]*constants[58];
		algebraic[106] = 1.00000+ (states[3]/constants[52])*(1.00000+states[3]/constants[53]);
		algebraic[107] = ( states[3]*states[3])/( algebraic[106]*constants[52]*constants[53]);
		algebraic[119] =  algebraic[107]*algebraic[104]*constants[56];
		algebraic[120] =  algebraic[110]*constants[123]*constants[56];
		algebraic[111] = 1.00000/algebraic[109];
		algebraic[112] =  algebraic[111]*constants[57];
		algebraic[114] = algebraic[112]+algebraic[113];
		algebraic[101] = exp(( constants[62]*states[0]*constants[6])/( constants[4]*constants[5]));
		algebraic[105] = 1.00000/algebraic[103];
		algebraic[115] = ( algebraic[105]*constants[57])/algebraic[101];
		algebraic[117] = algebraic[115]+algebraic[116];
		algebraic[108] = 1.00000/algebraic[106];
		algebraic[118] =  algebraic[108]*states[9]*constants[59];
		algebraic[121] =  constants[126]*algebraic[117]*(algebraic[119]+algebraic[118])+ constants[127]*algebraic[119]*(constants[126]+algebraic[114]);
		algebraic[122] =  constants[125]*algebraic[119]*(algebraic[117]+constants[127])+ algebraic[117]*algebraic[118]*(constants[125]+algebraic[120]);
		algebraic[123] =  constants[125]*algebraic[114]*(algebraic[119]+algebraic[118])+ algebraic[120]*algebraic[118]*(constants[126]+algebraic[114]);
		algebraic[124] =  constants[126]*algebraic[120]*(algebraic[117]+constants[127])+ algebraic[114]*constants[127]*(constants[125]+algebraic[120]);
		algebraic[125] = algebraic[121]/(algebraic[121]+algebraic[122]+algebraic[123]+algebraic[124]);
		algebraic[126] = algebraic[122]/(algebraic[121]+algebraic[122]+algebraic[123]+algebraic[124]);
		algebraic[127] = algebraic[123]/(algebraic[121]+algebraic[122]+algebraic[123]+algebraic[124]);
		algebraic[128] = algebraic[124]/(algebraic[121]+algebraic[122]+algebraic[123]+algebraic[124]);
		algebraic[130] = ( 3.00000*( algebraic[128]*algebraic[119] -  algebraic[125]*algebraic[120])+ algebraic[127]*algebraic[116]) -  algebraic[126]*algebraic[113];
		algebraic[131] =  algebraic[126]*constants[126] -  algebraic[125]*constants[125];
		algebraic[132] =  0.800000*constants[128]*algebraic[129]*( constants[7]*algebraic[130]+ constants[8]*algebraic[131]);
		algebraic[184] = ( constants[88]*algebraic[29]*( states[3]*exp(algebraic[39]) - constants[1]))/(exp(algebraic[39]) - 1.00000);
		algebraic[187] = (states[4] - states[3])/2.00000;
		rates[3] = ( - (algebraic[62]+algebraic[64]+ 3.00000*algebraic[132]+ 3.00000*algebraic[181]+algebraic[184])*constants[117]*constants[29])/( constants[6]*constants[118])+( algebraic[187]*constants[121])/constants[118];
		algebraic[78] = ( 1.00000*algebraic[29]*( 0.750000*states[4]*exp( 1.00000*algebraic[39]) -  0.750000*constants[1]))/(exp( 1.00000*algebraic[39]) - 1.00000);
		algebraic[82] =  (1.00000 - algebraic[80])*constants[111]*algebraic[78]*states[25]*( algebraic[71]*(1.00000 - states[33])+ states[30]*algebraic[74]*states[33])+ algebraic[80]*constants[115]*algebraic[78]*states[25]*( algebraic[75]*(1.00000 - states[33])+ states[30]*algebraic[76]*states[33]);
		algebraic[159] = 1.00000/(1.00000+pow(constants[63]/states[2], 2.00000));
		algebraic[139] = 1.00000+ (constants[1]/constants[54])*(1.00000+1.00000/algebraic[102]);
		algebraic[140] = constants[1]/( constants[54]*algebraic[102]*algebraic[139]);
		algebraic[143] =  algebraic[140]*constants[58];
		algebraic[133] = 1.00000+ (states[4]/constants[54])*(1.00000+algebraic[102]);
		algebraic[134] = ( states[4]*algebraic[102])/( constants[54]*algebraic[133]);
		algebraic[146] =  algebraic[134]*constants[58];
		algebraic[136] = 1.00000+ (states[4]/constants[52])*(1.00000+states[4]/constants[53]);
		algebraic[137] = ( states[4]*states[4])/( algebraic[136]*constants[52]*constants[53]);
		algebraic[149] =  algebraic[137]*algebraic[134]*constants[56];
		algebraic[150] =  algebraic[140]*constants[130]*constants[56];
		algebraic[141] = 1.00000/algebraic[139];
		algebraic[142] =  algebraic[141]*constants[57];
		algebraic[144] = algebraic[142]+algebraic[143];
		algebraic[135] = 1.00000/algebraic[133];
		algebraic[145] = ( algebraic[135]*constants[57])/algebraic[101];
		algebraic[147] = algebraic[145]+algebraic[146];
		algebraic[138] = 1.00000/algebraic[136];
		algebraic[148] =  algebraic[138]*states[2]*constants[59];
		algebraic[151] =  constants[133]*algebraic[147]*(algebraic[149]+algebraic[148])+ constants[134]*algebraic[149]*(constants[133]+algebraic[144]);
		algebraic[152] =  constants[132]*algebraic[149]*(algebraic[147]+constants[134])+ algebraic[147]*algebraic[148]*(constants[132]+algebraic[150]);
		algebraic[153] =  constants[132]*algebraic[144]*(algebraic[149]+algebraic[148])+ algebraic[150]*algebraic[148]*(constants[133]+algebraic[144]);
		algebraic[154] =  constants[133]*algebraic[150]*(algebraic[147]+constants[134])+ algebraic[144]*constants[134]*(constants[132]+algebraic[150]);
		algebraic[155] = algebraic[151]/(algebraic[151]+algebraic[152]+algebraic[153]+algebraic[154]);
		algebraic[156] = algebraic[152]/(algebraic[151]+algebraic[152]+algebraic[153]+algebraic[154]);
		algebraic[157] = algebraic[153]/(algebraic[151]+algebraic[152]+algebraic[153]+algebraic[154]);
		algebraic[158] = algebraic[154]/(algebraic[151]+algebraic[152]+algebraic[153]+algebraic[154]);
		algebraic[160] = ( 3.00000*( algebraic[158]*algebraic[149] -  algebraic[155]*algebraic[150])+ algebraic[157]*algebraic[146]) -  algebraic[156]*algebraic[143];
		algebraic[161] =  algebraic[156]*constants[133] -  algebraic[155]*constants[132];
		algebraic[162] =  0.200000*constants[128]*algebraic[159]*( constants[7]*algebraic[160]+ constants[8]*algebraic[161]);
		rates[4] = ( - (algebraic[82]+ 3.00000*algebraic[162])*constants[29]*constants[117])/( constants[6]*constants[121]) - algebraic[187];
		algebraic[188] = ( constants[90]*states[9])/(constants[91]+states[9]);
		algebraic[186] = ( constants[89]*4.00000*algebraic[29]*( states[9]*exp( 2.00000*algebraic[39]) -  0.341000*constants[2]))/(exp( 2.00000*algebraic[39]) - 1.00000);
		rates[0] = - (algebraic[62]+algebraic[64]+algebraic[70]+algebraic[81]+algebraic[82]+algebraic[85]+algebraic[96]+algebraic[98]+algebraic[100]+algebraic[132]+algebraic[162]+algebraic[181]+algebraic[184]+algebraic[183]+algebraic[188]+algebraic[186]+algebraic[12]);
		algebraic[189] = (states[2] - states[9])/0.200000;
		algebraic[190] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[191] =  (1.00000 - algebraic[190])*states[39]+ algebraic[190]*states[40];
		algebraic[51] = 1.00000/(1.00000+( constants[23]*constants[24])/pow(constants[24]+states[2], 2.00000)+( constants[25]*constants[26])/pow(constants[26]+states[2], 2.00000));
		rates[2] =  algebraic[51]*((( - (algebraic[81] -  2.00000*algebraic[162])*constants[29]*constants[117])/( 2.00000*constants[6]*constants[121])+( algebraic[191]*constants[120])/constants[121]) - algebraic[189]);
		algebraic[192] = ( constants[108]*0.00437500*states[9])/(states[9]+0.000920000);
		algebraic[193] = ( constants[108]*2.75000*0.00437500*states[9])/((states[9]+0.000920000) - 0.000170000);
		algebraic[194] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[195] = ( 0.00393750*states[7])/15.0000;
		algebraic[196] = ( (1.00000 - algebraic[194])*algebraic[192]+ algebraic[194]*algebraic[193]) - algebraic[195];
		algebraic[49] = 1.00000/(1.00000+( constants[93]*constants[20])/pow(constants[20]+states[9], 2.00000)+( constants[21]*constants[22])/pow(constants[22]+states[9], 2.00000));
		rates[9] =  algebraic[49]*((( - ((algebraic[188]+algebraic[186]) -  2.00000*algebraic[132])*constants[29]*constants[117])/( 2.00000*constants[6]*constants[118]) - ( algebraic[196]*constants[119])/constants[118])+( algebraic[189]*constants[121])/constants[118]);
		algebraic[197] = (states[7] - states[8])/100.000;
		rates[7] = algebraic[196] - ( algebraic[197]*constants[120])/constants[119];
		algebraic[53] = 1.00000/(1.00000+( constants[27]*constants[28])/pow(constants[28]+states[8], 2.00000));
		rates[8] =  algebraic[53]*(algebraic[197] - algebraic[191]);
	}

	void computeVariables(double VoI, double* constants, double* rates, double* states, double* algebraic){
		algebraic[2] = 1.00000/(1.00000+exp((states[0]+87.6100)/7.48800));
		algebraic[3] = 1.00000/(1.00000+exp((states[0]+93.8100)/7.48800));
		algebraic[0] = 1.00000/(1.00000+exp(- (states[0]+constants[31])/constants[32]));
		algebraic[13] = 1.00000/( constants[35]*exp((states[0]+constants[33])/constants[34])+ constants[36]*exp(- (states[0]+constants[37])/constants[38]));
		algebraic[1] = 1.00000/(1.00000+exp((states[0]+constants[39])/constants[40]));
		algebraic[14] = 1.00000/( 1.43200e-05*exp(- (states[0]+1.19600)/6.28500)+ 6.14900*exp((states[0]+0.509600)/20.2700));
		algebraic[15] = 1.00000/( 0.00979400*exp(- (states[0]+17.9500)/28.0500)+ 0.334300*exp((states[0]+5.73000)/56.6600));
		algebraic[4] = 1.00000/(1.00000+exp(- (states[0] - 14.3400)/14.8200));
		algebraic[17] = 1.05150/(1.00000/( 1.20890*(1.00000+exp(- (states[0] - 18.4099)/29.3814)))+3.50000/(1.00000+exp((states[0]+100.000)/29.3814)));
		algebraic[6] = 1.00000/(1.00000+exp(- (states[0]+3.94000)/4.23000));
		algebraic[21] = 0.600000+1.00000/(exp( - 0.0500000*(states[0]+6.00000))+exp( 0.0900000*(states[0]+14.0000)));
		algebraic[7] = 1.00000/(1.00000+exp((states[0]+19.5800)/3.69600));
		algebraic[22] = 7.00000+1.00000/( 0.00450000*exp(- (states[0]+20.0000)/10.0000)+ 0.00450000*exp((states[0]+20.0000)/10.0000));
		algebraic[23] = 1000.00+1.00000/( 3.50000e-05*exp(- (states[0]+5.00000)/4.00000)+ 3.50000e-05*exp((states[0]+5.00000)/6.00000));
		algebraic[19] = algebraic[7];
		algebraic[8] =  states[30]*1.00000;
		algebraic[20] = 1.00000/(constants[47]/algebraic[8]+pow(1.00000+constants[46]/states[2], 4.00000));
		algebraic[9] = 1.00000/(1.00000+exp(- (states[0]+8.33700)/6.78900));
		algebraic[24] = 12.9800+1.00000/( 0.365200*exp((states[0] - 31.6600)/3.86900)+ 4.12300e-05*exp(- (states[0] - 47.7800)/20.3800));
		algebraic[25] = 1.86500+1.00000/( 0.0662900*exp((states[0] - 34.7000)/7.35500)+ 1.12800e-05*exp(- (states[0] - 29.7400)/25.9400));
		algebraic[10] = 1.00000/(1.00000+exp(- (states[0]+11.6000)/8.93200));
		algebraic[27] = 817.300+1.00000/( 0.000232600*exp((states[0]+48.2800)/17.8000)+ 0.00129200*exp(- (states[0]+210.000)/230.000));
		algebraic[11] = 1.00000/(1.00000+exp(- (states[0]+ 2.55380*constants[3]+144.590)/( 1.56920*constants[3]+3.81150)));
		algebraic[28] = 122.200/(exp(- (states[0]+127.200)/20.3600)+exp((states[0]+236.800)/69.3300));
		algebraic[16] = algebraic[1];
		algebraic[30] = 2.03800+1.00000/( 0.0213600*exp(- (states[0]+100.600)/8.28100)+ 0.305200*exp((states[0]+0.994100)/38.4500));
		algebraic[34] = 1.00000/(1.00000+exp(- (states[0] - 24.3400)/14.8200));
		algebraic[35] = 7.00000+1.00000/( 0.0400000*exp(- (states[0] - 4.00000)/7.00000)+ 0.0400000*exp((states[0] - 4.00000)/7.00000));
		algebraic[36] = 100.000+1.00000/( 0.000120000*exp(- states[0]/3.00000)+ 0.000120000*exp(states[0]/7.00000));
		algebraic[37] =  2.50000*algebraic[22];
		algebraic[26] = algebraic[10];
		algebraic[38] = 1.00000/( 0.0100000*exp((states[0] - 50.0000)/20.0000)+ 0.0193000*exp(- (states[0]+66.5400)/31.0000));
		algebraic[45] = ( constants[17]*(1.00000 - states[1]))/(1.00000+constants[18]/states[2]);
		algebraic[31] = 1.00000/(1.00000+exp((states[0]+89.1000)/6.08600));
		algebraic[40] =  3.00000*algebraic[15];
		algebraic[41] =  1.46000*algebraic[30];
		algebraic[32] = 1.00000/(1.00000+exp(- (states[0]+42.8500)/5.26400));
		algebraic[42] = algebraic[13];
		algebraic[44] =  2.50000*algebraic[35];
		algebraic[5] = 1.00000/(1.00000+exp((states[0]+43.9400)/5.71100));
		algebraic[18] = (constants[0]==1.00000 ? 1.00000 - 0.950000/(1.00000+exp((states[0]+70.0000)/5.00000)) : 1.00000);
		algebraic[33] = 4.56200+1.00000/( 0.393300*exp(- (states[0]+100.000)/100.000)+ 0.0800400*exp((states[0]+50.0000)/16.5900));
		algebraic[46] =  algebraic[33]*algebraic[18];
		algebraic[43] = 23.6200+1.00000/( 0.00141600*exp(- (states[0]+96.5200)/59.0500)+ 1.78000e-08*exp((states[0]+114.100)/8.07900));
		algebraic[48] =  algebraic[43]*algebraic[18];
		algebraic[50] = 1.35400+0.000100000/(exp((states[0] - 167.400)/15.8900)+exp(- (states[0] - 12.2300)/0.215400));
		algebraic[52] = 1.00000 - 0.500000/(1.00000+exp((states[0]+70.0000)/20.0000));
		algebraic[54] =  algebraic[50]*algebraic[52]*algebraic[46];
		algebraic[55] =  algebraic[50]*algebraic[52]*algebraic[48];
		algebraic[71] =  constants[98]*states[26]+ constants[109]*states[27];
		algebraic[72] = 0.300000+0.600000/(1.00000+exp((states[0] - 10.0000)/10.0000));
		algebraic[73] = 1.00000 - algebraic[72];
		algebraic[74] =  algebraic[72]*states[28]+ algebraic[73]*states[29];
		algebraic[75] =  constants[98]*states[31]+ constants[109]*states[27];
		algebraic[76] =  algebraic[72]*states[32]+ algebraic[73]*states[29];
		algebraic[29] = ( states[0]*constants[6]*constants[6])/( constants[4]*constants[5]);
		algebraic[39] = ( states[0]*constants[6])/( constants[4]*constants[5]);
		algebraic[77] = ( 4.00000*algebraic[29]*( states[2]*exp( 2.00000*algebraic[39]) -  0.341000*constants[2]))/(exp( 2.00000*algebraic[39]) - 1.00000);
		algebraic[47] = algebraic[45]+states[1];
		algebraic[80] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[81] =  (1.00000 - algebraic[80])*constants[99]*algebraic[77]*states[25]*( algebraic[71]*(1.00000 - states[33])+ states[30]*algebraic[74]*states[33])+ algebraic[80]*constants[110]*algebraic[77]*states[25]*( algebraic[75]*(1.00000 - states[33])+ states[30]*algebraic[76]*states[33]);
		algebraic[83] = ( constants[106]*- algebraic[81])/(1.00000+ 1.00000*pow(1.50000/states[8], 8.00000));
		algebraic[86] = (constants[0]==2.00000 ?  algebraic[83]*1.70000 : algebraic[83]);
		algebraic[89] = constants[92]/(1.00000+0.0123000/states[8]);
		algebraic[92] = (algebraic[89]<0.00100000 ? 0.00100000 : algebraic[89]);
		algebraic[84] = ( constants[114]*- algebraic[81])/(1.00000+pow(1.50000/states[8], 8.00000));
		algebraic[87] = (constants[0]==2.00000 ?  algebraic[84]*1.70000 : algebraic[84]);
		algebraic[90] = constants[107]/(1.00000+0.0123000/states[8]);
		algebraic[93] = (algebraic[90]<0.00100000 ? 0.00100000 : algebraic[90]);
		algebraic[57] =  (( constants[4]*constants[5])/constants[6])*log(constants[3]/states[5]);
		algebraic[65] = 1.00000/(1.00000+exp((states[0] - 213.600)/151.200));
		algebraic[66] = 1.00000 - algebraic[65];
		algebraic[67] =  algebraic[65]*states[20]+ algebraic[66]*states[21];
		algebraic[68] =  algebraic[65]*states[23]+ algebraic[66]*states[24];
		algebraic[69] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[70] =  constants[97]*(states[0] - algebraic[57])*( (1.00000 - algebraic[69])*states[19]*algebraic[67]+ algebraic[69]*states[22]*algebraic[68]);
		algebraic[88] = 1.00000/(1.00000+exp((states[0]+54.8100)/38.2100));
		algebraic[91] = 1.00000 - algebraic[88];
		algebraic[94] =  algebraic[88]*states[34]+ algebraic[91]*states[35];
		algebraic[95] = ( (1.00000/(1.00000+exp((states[0]+55.0000)/75.0000)))*1.00000)/(1.00000+exp((states[0] - 10.0000)/30.0000));
		algebraic[96] =  constants[101]* pow((constants[3]/5.40000), 1.0 / 2)*algebraic[94]*algebraic[95]*(states[0] - algebraic[57]);
		algebraic[58] =  (( constants[4]*constants[5])/constants[6])*log((constants[3]+ constants[30]*constants[1])/(states[5]+ constants[30]*states[3]));
		algebraic[97] = 1.00000+0.600000/(1.00000+pow(3.80000e-05/states[9], 1.40000));
		algebraic[98] =  constants[102]*algebraic[97]*states[36]*states[37]*(states[0] - algebraic[58]);
		algebraic[99] = 1.00000/(1.00000+exp(((states[0]+105.800) -  2.60000*constants[3])/9.49300));
		algebraic[100] =  constants[103]* pow(constants[3], 1.0 / 2)*algebraic[99]*states[38]*(states[0] - algebraic[57]);
		algebraic[164] =  constants[74]*exp(( (1.00000 - constants[75])*states[0]*constants[6])/( 3.00000*constants[4]*constants[5]));
		algebraic[168] = ( constants[69]*pow(constants[3]/constants[77], 2.00000))/((pow(1.00000+constants[1]/algebraic[164], 3.00000)+pow(1.00000+constants[3]/constants[77], 2.00000)) - 1.00000);
		algebraic[165] = constants[82]/(1.00000+constants[81]/constants[83]+states[3]/constants[84]+states[5]/constants[85]);
		algebraic[169] = ( constants[70]*algebraic[165]*constants[81])/(1.00000+constants[79]/constants[80]);
		algebraic[163] =  constants[73]*exp(( constants[75]*states[0]*constants[6])/( 3.00000*constants[4]*constants[5]));
		algebraic[166] = ( constants[65]*pow(states[3]/algebraic[163], 3.00000))/((pow(1.00000+states[3]/algebraic[163], 3.00000)+pow(1.00000+states[5]/constants[76], 2.00000)) - 1.00000);
		algebraic[167] = ( constants[68]*pow(constants[1]/algebraic[164], 3.00000))/((pow(1.00000+constants[1]/algebraic[164], 3.00000)+pow(1.00000+constants[3]/constants[77], 2.00000)) - 1.00000);
		algebraic[170] = ( constants[72]*pow(states[5]/constants[76], 2.00000))/((pow(1.00000+states[3]/algebraic[163], 3.00000)+pow(1.00000+states[5]/constants[76], 2.00000)) - 1.00000);
		algebraic[171] =  constants[137]*algebraic[166]*constants[136]+ algebraic[167]*algebraic[170]*algebraic[169]+ constants[136]*algebraic[170]*algebraic[169]+ algebraic[169]*algebraic[166]*constants[136];
		algebraic[172] =  algebraic[167]*constants[135]*algebraic[170]+ algebraic[166]*constants[136]*algebraic[168]+ algebraic[168]*constants[135]*algebraic[170]+ constants[136]*algebraic[168]*algebraic[170];
		algebraic[173] =  constants[136]*algebraic[168]*constants[137]+ algebraic[169]*algebraic[167]*constants[135]+ algebraic[167]*constants[135]*constants[137]+ algebraic[168]*constants[137]*constants[135];
		algebraic[174] =  algebraic[170]*algebraic[169]*algebraic[167]+ algebraic[168]*constants[137]*algebraic[166]+ algebraic[167]*constants[137]*algebraic[166]+ algebraic[169]*algebraic[167]*algebraic[166];
		algebraic[175] = algebraic[171]/(algebraic[171]+algebraic[172]+algebraic[173]+algebraic[174]);
		algebraic[176] = algebraic[172]/(algebraic[171]+algebraic[172]+algebraic[173]+algebraic[174]);
		algebraic[179] =  3.00000*( algebraic[175]*algebraic[168] -  algebraic[176]*algebraic[169]);
		algebraic[177] = algebraic[173]/(algebraic[171]+algebraic[172]+algebraic[173]+algebraic[174]);
		algebraic[178] = algebraic[174]/(algebraic[171]+algebraic[172]+algebraic[173]+algebraic[174]);
		algebraic[180] =  2.00000*( algebraic[178]*constants[135] -  algebraic[177]*algebraic[166]);
		algebraic[181] =  constants[138]*( constants[7]*algebraic[179]+ constants[9]*algebraic[180]);
		algebraic[182] = 1.00000/(1.00000+exp(- (states[0] - 14.4800)/18.3400));
		algebraic[183] =  constants[105]*algebraic[182]*(states[0] - algebraic[57]);
		algebraic[12] = (VoI<=constants[13] ? constants[12] : 0.00000);
		algebraic[185] = (states[6] - states[5])/2.00000;
		algebraic[79] = ( 1.00000*algebraic[29]*( 0.750000*states[6]*exp( 1.00000*algebraic[39]) -  0.750000*constants[3]))/(exp( 1.00000*algebraic[39]) - 1.00000);
		algebraic[85] =  (1.00000 - algebraic[80])*constants[112]*algebraic[79]*states[25]*( algebraic[71]*(1.00000 - states[33])+ states[30]*algebraic[74]*states[33])+ algebraic[80]*constants[116]*algebraic[79]*states[25]*( algebraic[75]*(1.00000 - states[33])+ states[30]*algebraic[76]*states[33]);
		algebraic[56] =  (( constants[4]*constants[5])/constants[6])*log(constants[1]/states[3]);
		algebraic[59] =  constants[41]*states[11]+ constants[94]*states[12];
		algebraic[60] =  constants[41]*states[11]+ constants[94]*states[14];
		algebraic[61] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[62] =  constants[42]*(states[0] - algebraic[56])*pow(states[10], 3.00000)*( (1.00000 - algebraic[61])*algebraic[59]*states[13]+ algebraic[61]*algebraic[60]*states[15]);
		algebraic[63] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[64] =  constants[96]*(states[0] - algebraic[56])*states[16]*( (1.00000 - algebraic[63])*states[17]+ algebraic[63]*states[18]);
		algebraic[129] = 1.00000/(1.00000+pow(constants[63]/states[9], 2.00000));
		algebraic[102] = exp(( constants[61]*states[0]*constants[6])/( constants[4]*constants[5]));
		algebraic[109] = 1.00000+ (constants[1]/constants[54])*(1.00000+1.00000/algebraic[102]);
		algebraic[110] = constants[1]/( constants[54]*algebraic[102]*algebraic[109]);
		algebraic[113] =  algebraic[110]*constants[58];
		algebraic[103] = 1.00000+ (states[3]/constants[54])*(1.00000+algebraic[102]);
		algebraic[104] = ( states[3]*algebraic[102])/( constants[54]*algebraic[103]);
		algebraic[116] =  algebraic[104]*constants[58];
		algebraic[106] = 1.00000+ (states[3]/constants[52])*(1.00000+states[3]/constants[53]);
		algebraic[107] = ( states[3]*states[3])/( algebraic[106]*constants[52]*constants[53]);
		algebraic[119] =  algebraic[107]*algebraic[104]*constants[56];
		algebraic[120] =  algebraic[110]*constants[123]*constants[56];
		algebraic[111] = 1.00000/algebraic[109];
		algebraic[112] =  algebraic[111]*constants[57];
		algebraic[114] = algebraic[112]+algebraic[113];
		algebraic[101] = exp(( constants[62]*states[0]*constants[6])/( constants[4]*constants[5]));
		algebraic[105] = 1.00000/algebraic[103];
		algebraic[115] = ( algebraic[105]*constants[57])/algebraic[101];
		algebraic[117] = algebraic[115]+algebraic[116];
		algebraic[108] = 1.00000/algebraic[106];
		algebraic[118] =  algebraic[108]*states[9]*constants[59];
		algebraic[121] =  constants[126]*algebraic[117]*(algebraic[119]+algebraic[118])+ constants[127]*algebraic[119]*(constants[126]+algebraic[114]);
		algebraic[122] =  constants[125]*algebraic[119]*(algebraic[117]+constants[127])+ algebraic[117]*algebraic[118]*(constants[125]+algebraic[120]);
		algebraic[123] =  constants[125]*algebraic[114]*(algebraic[119]+algebraic[118])+ algebraic[120]*algebraic[118]*(constants[126]+algebraic[114]);
		algebraic[124] =  constants[126]*algebraic[120]*(algebraic[117]+constants[127])+ algebraic[114]*constants[127]*(constants[125]+algebraic[120]);
		algebraic[125] = algebraic[121]/(algebraic[121]+algebraic[122]+algebraic[123]+algebraic[124]);
		algebraic[126] = algebraic[122]/(algebraic[121]+algebraic[122]+algebraic[123]+algebraic[124]);
		algebraic[127] = algebraic[123]/(algebraic[121]+algebraic[122]+algebraic[123]+algebraic[124]);
		algebraic[128] = algebraic[124]/(algebraic[121]+algebraic[122]+algebraic[123]+algebraic[124]);
		algebraic[130] = ( 3.00000*( algebraic[128]*algebraic[119] -  algebraic[125]*algebraic[120])+ algebraic[127]*algebraic[116]) -  algebraic[126]*algebraic[113];
		algebraic[131] =  algebraic[126]*constants[126] -  algebraic[125]*constants[125];
		algebraic[132] =  0.800000*constants[128]*algebraic[129]*( constants[7]*algebraic[130]+ constants[8]*algebraic[131]);
		algebraic[184] = ( constants[88]*algebraic[29]*( states[3]*exp(algebraic[39]) - constants[1]))/(exp(algebraic[39]) - 1.00000);
		algebraic[187] = (states[4] - states[3])/2.00000;
		algebraic[78] = ( 1.00000*algebraic[29]*( 0.750000*states[4]*exp( 1.00000*algebraic[39]) -  0.750000*constants[1]))/(exp( 1.00000*algebraic[39]) - 1.00000);
		algebraic[82] =  (1.00000 - algebraic[80])*constants[111]*algebraic[78]*states[25]*( algebraic[71]*(1.00000 - states[33])+ states[30]*algebraic[74]*states[33])+ algebraic[80]*constants[115]*algebraic[78]*states[25]*( algebraic[75]*(1.00000 - states[33])+ states[30]*algebraic[76]*states[33]);
		algebraic[159] = 1.00000/(1.00000+pow(constants[63]/states[2], 2.00000));
		algebraic[139] = 1.00000+ (constants[1]/constants[54])*(1.00000+1.00000/algebraic[102]);
		algebraic[140] = constants[1]/( constants[54]*algebraic[102]*algebraic[139]);
		algebraic[143] =  algebraic[140]*constants[58];
		algebraic[133] = 1.00000+ (states[4]/constants[54])*(1.00000+algebraic[102]);
		algebraic[134] = ( states[4]*algebraic[102])/( constants[54]*algebraic[133]);
		algebraic[146] =  algebraic[134]*constants[58];
		algebraic[136] = 1.00000+ (states[4]/constants[52])*(1.00000+states[4]/constants[53]);
		algebraic[137] = ( states[4]*states[4])/( algebraic[136]*constants[52]*constants[53]);
		algebraic[149] =  algebraic[137]*algebraic[134]*constants[56];
		algebraic[150] =  algebraic[140]*constants[130]*constants[56];
		algebraic[141] = 1.00000/algebraic[139];
		algebraic[142] =  algebraic[141]*constants[57];
		algebraic[144] = algebraic[142]+algebraic[143];
		algebraic[135] = 1.00000/algebraic[133];
		algebraic[145] = ( algebraic[135]*constants[57])/algebraic[101];
		algebraic[147] = algebraic[145]+algebraic[146];
		algebraic[138] = 1.00000/algebraic[136];
		algebraic[148] =  algebraic[138]*states[2]*constants[59];
		algebraic[151] =  constants[133]*algebraic[147]*(algebraic[149]+algebraic[148])+ constants[134]*algebraic[149]*(constants[133]+algebraic[144]);
		algebraic[152] =  constants[132]*algebraic[149]*(algebraic[147]+constants[134])+ algebraic[147]*algebraic[148]*(constants[132]+algebraic[150]);
		algebraic[153] =  constants[132]*algebraic[144]*(algebraic[149]+algebraic[148])+ algebraic[150]*algebraic[148]*(constants[133]+algebraic[144]);
		algebraic[154] =  constants[133]*algebraic[150]*(algebraic[147]+constants[134])+ algebraic[144]*constants[134]*(constants[132]+algebraic[150]);
		algebraic[155] = algebraic[151]/(algebraic[151]+algebraic[152]+algebraic[153]+algebraic[154]);
		algebraic[156] = algebraic[152]/(algebraic[151]+algebraic[152]+algebraic[153]+algebraic[154]);
		algebraic[157] = algebraic[153]/(algebraic[151]+algebraic[152]+algebraic[153]+algebraic[154]);
		algebraic[158] = algebraic[154]/(algebraic[151]+algebraic[152]+algebraic[153]+algebraic[154]);
		algebraic[160] = ( 3.00000*( algebraic[158]*algebraic[149] -  algebraic[155]*algebraic[150])+ algebraic[157]*algebraic[146]) -  algebraic[156]*algebraic[143];
		algebraic[161] =  algebraic[156]*constants[133] -  algebraic[155]*constants[132];
		algebraic[162] =  0.200000*constants[128]*algebraic[159]*( constants[7]*algebraic[160]+ constants[8]*algebraic[161]);
		algebraic[188] = ( constants[90]*states[9])/(constants[91]+states[9]);
		algebraic[186] = ( constants[89]*4.00000*algebraic[29]*( states[9]*exp( 2.00000*algebraic[39]) -  0.341000*constants[2]))/(exp( 2.00000*algebraic[39]) - 1.00000);
		algebraic[189] = (states[2] - states[9])/0.200000;
		algebraic[190] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[191] =  (1.00000 - algebraic[190])*states[39]+ algebraic[190]*states[40];
		algebraic[51] = 1.00000/(1.00000+( constants[23]*constants[24])/pow(constants[24]+states[2], 2.00000)+( constants[25]*constants[26])/pow(constants[26]+states[2], 2.00000));
		algebraic[192] = ( constants[108]*0.00437500*states[9])/(states[9]+0.000920000);
		algebraic[193] = ( constants[108]*2.75000*0.00437500*states[9])/((states[9]+0.000920000) - 0.000170000);
		algebraic[194] = 1.00000/(1.00000+constants[14]/algebraic[47]);
		algebraic[195] = ( 0.00393750*states[7])/15.0000;
		algebraic[196] = ( (1.00000 - algebraic[194])*algebraic[192]+ algebraic[194]*algebraic[193]) - algebraic[195];
		algebraic[49] = 1.00000/(1.00000+( constants[93]*constants[20])/pow(constants[20]+states[9], 2.00000)+( constants[21]*constants[22])/pow(constants[22]+states[9], 2.00000));
		algebraic[197] = (states[7] - states[8])/100.000;
		algebraic[53] = 1.00000/(1.00000+( constants[27]*constants[28])/pow(constants[28]+states[8], 2.00000));
	}

};
