/*======================================================================
                                                                        
                      --- DENIS Project ---                             
                        -----------------                               
                                                                        
      Distributed computing                                             
      Electrophysiologycal Models                                       
      Networking colaboration                                           
      In Silico research                                                
      Sharing Knowledge                                                 
                                                                        
------------------------------------------------------------------------
                                                                        
 -- C File of the grandi_pasqualini_bers_2010_ss model created for the DENIS Project -- 
                                                                        
 This file has been automatically created using the CellML API.         
                                                                        
------------------------------------------------------------------------
                                                                        
 DENIS-CellML2C Copyright 2015 J. Carro; J. Castro                      
                                                                        
 Licensed under the Apache License, Version 2.0 (the "License");      
 you may not use this file except in compliance with the License.       
 You may obtain a copy of the License at                                
                                                                        
 http://www.apache.org/licenses/LICENSE-2.0                             
                                                                        
 Unless required by applicable law or agreed to in writing, software    
 distributed under the License is distributed on an "AS IS" BASIS,    
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        
 implied. See the License for the specific language governing           
 permissions and limitations under the License.                         
                                                                        
------------------------------------------------------------------------
                                                                        
                                                  San Jorge University  
                                                 School of Engineering  
                                                                        
                                                     http://eps.usj.es  
                                                                        
======================================================================*/

using namespace std;

namespace grandi_pasqualini_bers_2010_ss{

	#define ALGEBRAIC_LENGTH 114
	#define STATE_LENGTH 39
	#define CONSTANT_LENGTH 136 

	double* getNewConstantsArray(){return new double[CONSTANT_LENGTH];}
	double* getNewRatesArray(){return new double[STATE_LENGTH];}
	double* getNewStatesArray(){return new double[STATE_LENGTH];}
	double* getNewAlgebraicArray(){return new double[ALGEBRAIC_LENGTH];}
	
	void getNewArrays(double **constants, double **rates, double **states, double **algebraic){
		*constants = getNewConstantsArray();
		*rates     = getNewRatesArray();
		*states    = getNewStatesArray();
		*algebraic = getNewAlgebraicArray();
	}
	
	void getVectorsLength(int* algebraicLength, int* statesLength, int* constantsLength){
		*algebraicLength = ALGEBRAIC_LENGTH;
		*statesLength = STATE_LENGTH;
		*constantsLength = CONSTANT_LENGTH;
	}
	
	int getNameId(const char* variable, const char* component, const char** names, int namesLength){
		int index = -1;
		int counter = 0;
		string completName(variable);
		completName += " in component ";
		completName += component;
		for(int i=0; i < namesLength; i++){
			if(strncmp(completName.c_str(), names[i], (long)completName.length())==0){
				index = i;
				counter++;
			}
		}
		
		switch(counter){
			case 1:
				return index;
			case 0:
				return -1;
			default:
				return -counter;
		}
	}
		
	void names(const char* &VoI, const char** constants, const char** rates, const char** states, const char** algebraic){
		VoI  = "time in component environment (msec)";
		states[0]  = "V_m in component membrane_potential (mV)";
		constants[20]  = "epi in component parameters (dimensionless)";
		constants[21]  = "R in component parameters (joule_per_kelvin_per_kilomole)";
		constants[109]  = "Frdy in component parameters (coulomb_per_mole)";
		constants[117]  = "Temp in component parameters (kelvin)";
		constants[121]  = "FoRT in component parameters (per_mV)";
		constants[22]  = "Cmem in component parameters (farad)";
		constants[122]  = "Qpow in component parameters (dimensionless)";
		constants[23]  = "cellLength in component parameters (um)";
		constants[110]  = "cellRadius in component parameters (um)";
		constants[24]  = "junctionLength in component parameters (um)";
		constants[111]  = "junctionRadius in component parameters (um)";
		constants[25]  = "distSLcyto in component parameters (um)";
		constants[26]  = "distJuncSL in component parameters (um)";
		constants[27]  = "DcaJuncSL in component parameters (cm2_per_sec)";
		constants[28]  = "DcaSLcyto in component parameters (cm2_per_sec)";
		constants[29]  = "DnaJuncSL in component parameters (cm2_per_sec)";
		constants[30]  = "DnaSLcyto in component parameters (cm2_per_sec)";
		constants[118]  = "Vcell in component parameters (liter)";
		constants[123]  = "Vmyo in component parameters (liter)";
		constants[124]  = "Vsr in component parameters (liter)";
		constants[125]  = "Vsl in component parameters (liter)";
		constants[126]  = "Vjunc in component parameters (liter)";
		constants[119]  = "SAjunc in component parameters (um2)";
		constants[120]  = "SAsl in component parameters (um2)";
		constants[31]  = "J_ca_juncsl in component parameters (liters_per_msec)";
		constants[32]  = "J_ca_slmyo in component parameters (liters_per_msec)";
		constants[33]  = "J_na_juncsl in component parameters (liters_per_msec)";
		constants[34]  = "J_na_slmyo in component parameters (liters_per_msec)";
		constants[35]  = "Fjunc in component parameters (dimensionless)";
		constants[112]  = "Fsl in component parameters (dimensionless)";
		constants[36]  = "Fjunc_CaL in component parameters (dimensionless)";
		constants[113]  = "Fsl_CaL in component parameters (dimensionless)";
		constants[127]  = "Cli in component parameters (mM)";
		constants[128]  = "Clo in component parameters (mM)";
		constants[0]  = "Ko in component parameters (mM)";
		constants[1]  = "Nao in component parameters (mM)";
		constants[2]  = "Cao in component parameters (mM)";
		constants[37]  = "Mgi in component parameters (mM)";
		algebraic[9]  = "ena_junc in component parameters (mV)";
		algebraic[22]  = "ena_sl in component parameters (mV)";
		algebraic[26]  = "ek in component parameters (mV)";
		algebraic[30]  = "eca_junc in component parameters (mV)";
		algebraic[32]  = "eca_sl in component parameters (mV)";
		constants[134]  = "ecl in component parameters (mV)";
		constants[3]  = "GNa in component parameters (mS_per_uF)";
		constants[38]  = "GNaB in component parameters (mS_per_uF)";
		constants[39]  = "IbarNaK in component parameters (uA_per_uF)";
		constants[40]  = "KmNaip in component parameters (mM)";
		constants[41]  = "KmKo in component parameters (mM)";
		constants[42]  = "Q10NaK in component parameters (dimensionless)";
		constants[43]  = "Q10KmNai in component parameters (dimensionless)";
		constants[44]  = "pNaK in component parameters (dimensionless)";
		constants[45]  = "gkp in component parameters (mS_per_uF)";
		constants[46]  = "GClCa in component parameters (mS_per_uF)";
		constants[47]  = "GClB in component parameters (mS_per_uF)";
		constants[48]  = "KdClCa in component parameters (mM)";
		constants[49]  = "pNa in component parameters (cm_per_sec)";
		constants[50]  = "pCa in component parameters (cm_per_sec)";
		constants[4]  = "pCa_max in component parameters (cm_per_sec)";
		constants[51]  = "pK in component parameters (cm_per_sec)";
		constants[52]  = "Q10CaL in component parameters (dimensionless)";
		constants[5]  = "IbarNCX in component parameters (uA_per_uF)";
		constants[53]  = "KmCai in component parameters (mM)";
		constants[54]  = "KmCao in component parameters (mM)";
		constants[55]  = "KmNai in component parameters (mM)";
		constants[56]  = "KmNao in component parameters (mM)";
		constants[57]  = "ksat in component parameters (dimensionless)";
		constants[58]  = "nu in component parameters (dimensionless)";
		constants[59]  = "Kdact in component parameters (mM)";
		constants[60]  = "Q10NCX in component parameters (dimensionless)";
		constants[61]  = "IbarSLCaP in component parameters (uA_per_uF)";
		constants[62]  = "KmPCa in component parameters (mM)";
		constants[63]  = "GCaB in component parameters (mS_per_uF)";
		constants[64]  = "Q10SLCaP in component parameters (dimensionless)";
		constants[65]  = "Q10SRCaP in component parameters (dimensionless)";
		constants[6]  = "Vmax_SRCaP in component parameters (mM_per_msec)";
		constants[66]  = "Kmf in component parameters (mM)";
		constants[67]  = "Kmr in component parameters (mM)";
		constants[68]  = "hillSRCaP in component parameters (dimensionless)";
		constants[7]  = "ks in component parameters (per_msec)";
		constants[69]  = "koCa in component parameters (per_mM2_per_msec)";
		constants[70]  = "kom in component parameters (per_msec)";
		constants[116]  = "kiCa in component parameters (per_mM_per_msec)";
		constants[71]  = "kim in component parameters (per_msec)";
		constants[72]  = "ec50SR in component parameters (mM)";
		constants[73]  = "Bmax_Naj in component parameters (mM)";
		constants[74]  = "Bmax_Nasl in component parameters (mM)";
		constants[75]  = "koff_na in component parameters (per_msec)";
		constants[76]  = "kon_na in component parameters (per_mM_per_msec)";
		constants[77]  = "Bmax_TnClow in component parameters (mM)";
		constants[78]  = "koff_tncl in component parameters (per_msec)";
		constants[79]  = "kon_tncl in component parameters (per_mM_per_msec)";
		constants[80]  = "Bmax_TnChigh in component parameters (mM)";
		constants[81]  = "koff_tnchca in component parameters (per_msec)";
		constants[82]  = "kon_tnchca in component parameters (per_mM_per_msec)";
		constants[83]  = "koff_tnchmg in component parameters (per_msec)";
		constants[84]  = "kon_tnchmg in component parameters (per_mM_per_msec)";
		constants[85]  = "Bmax_CaM in component parameters (mM)";
		constants[86]  = "koff_cam in component parameters (per_msec)";
		constants[87]  = "kon_cam in component parameters (per_mM_per_msec)";
		constants[88]  = "Bmax_myosin in component parameters (mM)";
		constants[89]  = "koff_myoca in component parameters (per_msec)";
		constants[90]  = "kon_myoca in component parameters (per_mM_per_msec)";
		constants[91]  = "koff_myomg in component parameters (per_msec)";
		constants[92]  = "kon_myomg in component parameters (per_mM_per_msec)";
		constants[93]  = "Bmax_SR in component parameters (mM)";
		constants[94]  = "koff_sr in component parameters (per_msec)";
		constants[95]  = "kon_sr in component parameters (per_mM_per_msec)";
		constants[129]  = "Bmax_SLlowsl in component parameters (mM)";
		constants[130]  = "Bmax_SLlowj in component parameters (mM)";
		constants[96]  = "koff_sll in component parameters (per_msec)";
		constants[97]  = "kon_sll in component parameters (per_mM_per_msec)";
		constants[131]  = "Bmax_SLhighsl in component parameters (mM)";
		constants[132]  = "Bmax_SLhighj in component parameters (mM)";
		constants[98]  = "koff_slh in component parameters (per_msec)";
		constants[99]  = "kon_slh in component parameters (per_mM_per_msec)";
		constants[133]  = "Bmax_Csqn in component parameters (mM)";
		constants[100]  = "koff_csqn in component parameters (per_msec)";
		constants[101]  = "kon_csqn in component parameters (per_mM_per_msec)";
		states[1]  = "Na_j in component Na_Concentrations (mM)";
		states[2]  = "Na_sl in component Na_Concentrations (mM)";
		states[3]  = "K_i in component K_Concentration (mM)";
		states[4]  = "Ca_j in component Ca_Concentrations (mM)";
		states[5]  = "Ca_sl in component Ca_Concentrations (mM)";
		algebraic[0]  = "mss in component I_Na (dimensionless)";
		algebraic[11]  = "taum in component I_Na (msec)";
		algebraic[1]  = "ah in component I_Na (dimensionless)";
		algebraic[12]  = "bh in component I_Na (dimensionless)";
		algebraic[24]  = "tauh in component I_Na (msec)";
		algebraic[28]  = "hss in component I_Na (dimensionless)";
		algebraic[2]  = "aj in component I_Na (dimensionless)";
		algebraic[13]  = "bj in component I_Na (dimensionless)";
		algebraic[25]  = "tauj in component I_Na (msec)";
		algebraic[29]  = "jss in component I_Na (dimensionless)";
		states[6]  = "m in component I_Na (dimensionless)";
		states[7]  = "h in component I_Na (dimensionless)";
		states[8]  = "j in component I_Na (dimensionless)";
		algebraic[33]  = "I_Na_junc in component I_Na (uA_per_uF)";
		algebraic[34]  = "I_Na_sl in component I_Na (uA_per_uF)";
		algebraic[35]  = "I_Na in component I_Na (uA_per_uF)";
		constants[8]  = "shift_INa_inact in component I_Na (mV)";
		constants[9]  = "perc_reduced_inact_for_IpNa in component I_Na (dimensionless)";
		algebraic[36]  = "I_nabk_junc in component I_NaBK (uA_per_uF)";
		algebraic[37]  = "I_nabk_sl in component I_NaBK (uA_per_uF)";
		algebraic[38]  = "I_nabk in component I_NaBK (uA_per_uF)";
		constants[102]  = "sigma in component I_NaK (dimensionless)";
		algebraic[39]  = "fnak in component I_NaK (dimensionless)";
		algebraic[40]  = "I_nak_junc in component I_NaK (uA_per_uF)";
		algebraic[41]  = "I_nak_sl in component I_NaK (uA_per_uF)";
		algebraic[42]  = "I_nak in component I_NaK (uA_per_uF)";
		constants[103]  = "gkr in component I_Kr (mS_per_uF)";
		constants[10]  = "gkr_max in component I_Kr (mS_per_uF)";
		algebraic[3]  = "xrss in component I_Kr (dimensionless)";
		algebraic[14]  = "tauxr in component I_Kr (msec)";
		states[9]  = "x_kr in component I_Kr (dimensionless)";
		algebraic[43]  = "rkr in component I_Kr (dimensionless)";
		algebraic[44]  = "I_kr in component I_Kr (uA_per_uF)";
		algebraic[45]  = "kp_kp in component I_Kp (dimensionless)";
		algebraic[46]  = "I_kp_junc in component I_Kp (uA_per_uF)";
		algebraic[47]  = "I_kp_sl in component I_Kp (uA_per_uF)";
		algebraic[48]  = "I_kp in component I_Kp (uA_per_uF)";
		algebraic[49]  = "eks in component I_Ks (mV)";
		constants[104]  = "gks_junc in component I_Ks (mS_per_uF)";
		constants[11]  = "gks_sl in component I_Ks (mS_per_uF)";
		algebraic[4]  = "xsss in component I_Ks (dimensionless)";
		algebraic[15]  = "tauxs in component I_Ks (msec)";
		states[10]  = "x_ks in component I_Ks (dimensionless)";
		algebraic[50]  = "I_ks_junc in component I_Ks (uA_per_uF)";
		algebraic[51]  = "I_ks_sl in component I_Ks (uA_per_uF)";
		algebraic[52]  = "I_ks in component I_Ks (uA_per_uF)";
		states[11]  = "Na_i in component Na_Concentrations (mM)";
		constants[114]  = "GtoSlow in component I_to (mS_per_uF)";
		constants[115]  = "GtoFast in component I_to (mS_per_uF)";
		constants[12]  = "GtoFast_factor in component I_to (dimensionless)";
		algebraic[5]  = "xtoss in component I_to (dimensionless)";
		algebraic[6]  = "ytoss in component I_to (dimensionless)";
		algebraic[16]  = "tauxtos in component I_to (msec)";
		algebraic[17]  = "tauytos in component I_to (msec)";
		states[12]  = "x_to_s in component I_to (dimensionless)";
		states[13]  = "y_to_s in component I_to (dimensionless)";
		algebraic[53]  = "I_tos in component I_to (uA_per_uF)";
		algebraic[18]  = "tauxtof in component I_to (msec)";
		algebraic[19]  = "tauytof in component I_to (msec)";
		states[14]  = "x_to_f in component I_to (dimensionless)";
		states[15]  = "y_to_f in component I_to (dimensionless)";
		algebraic[54]  = "I_tof in component I_to (uA_per_uF)";
		algebraic[55]  = "I_to in component I_to (uA_per_uF)";
		algebraic[56]  = "aki in component I_Ki (dimensionless)";
		algebraic[57]  = "bki in component I_Ki (dimensionless)";
		algebraic[58]  = "kiss in component I_Ki (dimensionless)";
		algebraic[59]  = "I_ki in component I_Ki (uA_per_uF)";
		constants[13]  = "g_ki in component I_Ki (mS_per_uF)";
		algebraic[60]  = "I_ClCa_junc in component I_ClCa (uA_per_uF)";
		algebraic[61]  = "I_ClCa_sl in component I_ClCa (uA_per_uF)";
		algebraic[62]  = "I_ClCa in component I_ClCa (uA_per_uF)";
		algebraic[63]  = "I_Clbk in component I_ClCa (uA_per_uF)";
		algebraic[7]  = "fss in component I_Ca (dimensionless)";
		algebraic[8]  = "dss in component I_Ca (dimensionless)";
		algebraic[20]  = "taud in component I_Ca (msec)";
		algebraic[21]  = "tauf in component I_Ca (msec)";
		states[16]  = "d in component I_Ca (dimensionless)";
		states[17]  = "f in component I_Ca (dimensionless)";
		states[18]  = "f_Ca_Bj in component I_Ca (dimensionless)";
		states[19]  = "f_Ca_Bsl in component I_Ca (dimensionless)";
		constants[105]  = "fcaCaMSL in component I_Ca (dimensionless)";
		constants[106]  = "fcaCaj in component I_Ca (dimensionless)";
		algebraic[64]  = "ibarca_j in component I_Ca (uA_per_uF)";
		algebraic[65]  = "ibarca_sl in component I_Ca (uA_per_uF)";
		algebraic[66]  = "ibark in component I_Ca (uA_per_uF)";
		algebraic[67]  = "ibarna_j in component I_Ca (uA_per_uF)";
		algebraic[68]  = "ibarna_sl in component I_Ca (uA_per_uF)";
		algebraic[69]  = "I_Ca_junc in component I_Ca (uA_per_uF)";
		algebraic[70]  = "I_Ca_sl in component I_Ca (uA_per_uF)";
		algebraic[71]  = "I_Ca in component I_Ca (uA_per_uF)";
		algebraic[72]  = "I_CaK in component I_Ca (uA_per_uF)";
		algebraic[73]  = "I_CaNa_junc in component I_Ca (uA_per_uF)";
		algebraic[74]  = "I_CaNa_sl in component I_Ca (uA_per_uF)";
		algebraic[75]  = "I_CaNa in component I_Ca (uA_per_uF)";
		algebraic[77]  = "I_Catot in component I_Ca (uA_per_uF)";
		algebraic[76]  = "Ka_junc in component I_NCX (dimensionless)";
		algebraic[78]  = "Ka_sl in component I_NCX (dimensionless)";
		algebraic[79]  = "s1_junc in component I_NCX (mM4)";
		algebraic[80]  = "s1_sl in component I_NCX (mM4)";
		algebraic[81]  = "s2_junc in component I_NCX (mM4)";
		algebraic[82]  = "s3_junc in component I_NCX (mM4)";
		algebraic[83]  = "s2_sl in component I_NCX (mM4)";
		algebraic[84]  = "s3_sl in component I_NCX (mM4)";
		algebraic[85]  = "I_ncx_junc in component I_NCX (uA_per_uF)";
		algebraic[86]  = "I_ncx_sl in component I_NCX (uA_per_uF)";
		algebraic[88]  = "I_ncx in component I_NCX (uA_per_uF)";
		algebraic[89]  = "I_pca_junc in component I_PCa (uA_per_uF)";
		algebraic[91]  = "I_pca_sl in component I_PCa (uA_per_uF)";
		algebraic[92]  = "I_pca in component I_PCa (uA_per_uF)";
		algebraic[93]  = "I_cabk_junc in component I_CaBK (uA_per_uF)";
		algebraic[94]  = "I_cabk_sl in component I_CaBK (uA_per_uF)";
		algebraic[95]  = "I_cabk in component I_CaBK (uA_per_uF)";
		constants[107]  = "MaxSR in component SR_Fluxes (dimensionless)";
		constants[108]  = "MinSR in component SR_Fluxes (dimensionless)";
		algebraic[10]  = "kCaSR in component SR_Fluxes (dimensionless)";
		algebraic[23]  = "koSRCa in component SR_Fluxes (per_mM2_per_msec)";
		algebraic[27]  = "kiSRCa in component SR_Fluxes (per_mM_per_msec)";
		algebraic[31]  = "RI in component SR_Fluxes (mM)";
		states[20]  = "Ry_Rr in component SR_Fluxes (mM)";
		states[21]  = "Ry_Ro in component SR_Fluxes (mM)";
		states[22]  = "Ry_Ri in component SR_Fluxes (mM)";
		algebraic[96]  = "J_SRCarel in component SR_Fluxes (mM_per_msec)";
		algebraic[97]  = "J_serca in component SR_Fluxes (mM_per_msec)";
		algebraic[98]  = "J_SRleak in component SR_Fluxes (mM_per_msec)";
		constants[14]  = "SR_leak_max in component SR_Fluxes (per_msec)";
		states[23]  = "Ca_sr in component SR_Ca_Concentrations (mM)";
		states[24]  = "Ca_i in component Ca_Concentrations (mM)";
		states[25]  = "Na_Bj in component Na_Buffers (mM)";
		states[26]  = "Na_Bsl in component Na_Buffers (mM)";
		algebraic[100]  = "dNa_Bj_dt in component Na_Buffers (mM_per_msec)";
		algebraic[101]  = "dNa_Bsl_dt in component Na_Buffers (mM_per_msec)";
		states[27]  = "Tn_CL in component Cytosolic_Ca_Buffers (mM)";
		states[28]  = "Tn_CHc in component Cytosolic_Ca_Buffers (mM)";
		states[29]  = "Tn_CHm in component Cytosolic_Ca_Buffers (mM)";
		states[30]  = "CaM in component Cytosolic_Ca_Buffers (mM)";
		states[31]  = "Myo_c in component Cytosolic_Ca_Buffers (mM)";
		states[32]  = "Myo_m in component Cytosolic_Ca_Buffers (mM)";
		states[33]  = "SRB in component Cytosolic_Ca_Buffers (mM)";
		algebraic[99]  = "J_CaB_cytosol in component Cytosolic_Ca_Buffers (mM_per_msec)";
		states[34]  = "SLL_j in component Junctional_and_SL_Ca_Buffers (mM)";
		states[35]  = "SLL_sl in component Junctional_and_SL_Ca_Buffers (mM)";
		states[36]  = "SLH_j in component Junctional_and_SL_Ca_Buffers (mM)";
		states[37]  = "SLH_sl in component Junctional_and_SL_Ca_Buffers (mM)";
		algebraic[102]  = "J_CaB_junction in component Junctional_and_SL_Ca_Buffers (mM_per_msec)";
		algebraic[103]  = "J_CaB_sl in component Junctional_and_SL_Ca_Buffers (mM_per_msec)";
		states[38]  = "Csqn_b in component SR_Ca_Concentrations (mM)";
		algebraic[104]  = "I_Na_tot_junc in component Na_Concentrations (uA_per_uF)";
		algebraic[105]  = "I_Na_tot_sl in component Na_Concentrations (uA_per_uF)";
		algebraic[90]  = "I_Na_tot_sl2 in component Na_Concentrations (uA_per_uF)";
		algebraic[87]  = "I_Na_tot_junc2 in component Na_Concentrations (uA_per_uF)";
		constants[15]  = "conc_clamp in component Na_Concentrations (dimensionless)";
		algebraic[106]  = "I_K_tot in component K_Concentration (uA_per_uF)";
		algebraic[107]  = "I_Ca_tot_junc in component Ca_Concentrations (uA_per_uF)";
		algebraic[108]  = "I_Ca_tot_sl in component Ca_Concentrations (uA_per_uF)";
		algebraic[110]  = "I_Na_tot in component membrane_potential (uA_per_uF)";
		algebraic[111]  = "I_Cl_tot in component membrane_potential (uA_per_uF)";
		algebraic[112]  = "I_Ca_tot in component membrane_potential (uA_per_uF)";
		algebraic[113]  = "I_tot in component membrane_potential (uA_per_uF)";
		algebraic[109]  = "i_Stim in component membrane_potential (uA_per_uF)";
		constants[16]  = "stim_start in component membrane_potential (msec)";
		constants[17]  = "stim_period in component membrane_potential (msec)";
		constants[18]  = "stim_duration in component membrane_potential (msec)";
		constants[19]  = "stim_amplitude in component membrane_potential (uA_per_uF)";
		rates[6]  = "d/dt m in component I_Na (dimensionless)";
		rates[7]  = "d/dt h in component I_Na (dimensionless)";
		rates[8]  = "d/dt j in component I_Na (dimensionless)";
		rates[9]  = "d/dt x_kr in component I_Kr (dimensionless)";
		rates[10]  = "d/dt x_ks in component I_Ks (dimensionless)";
		rates[12]  = "d/dt x_to_s in component I_to (dimensionless)";
		rates[13]  = "d/dt y_to_s in component I_to (dimensionless)";
		rates[14]  = "d/dt x_to_f in component I_to (dimensionless)";
		rates[15]  = "d/dt y_to_f in component I_to (dimensionless)";
		rates[16]  = "d/dt d in component I_Ca (dimensionless)";
		rates[17]  = "d/dt f in component I_Ca (dimensionless)";
		rates[18]  = "d/dt f_Ca_Bj in component I_Ca (dimensionless)";
		rates[19]  = "d/dt f_Ca_Bsl in component I_Ca (dimensionless)";
		rates[20]  = "d/dt Ry_Rr in component SR_Fluxes (mM)";
		rates[21]  = "d/dt Ry_Ro in component SR_Fluxes (mM)";
		rates[22]  = "d/dt Ry_Ri in component SR_Fluxes (mM)";
		rates[25]  = "d/dt Na_Bj in component Na_Buffers (mM)";
		rates[26]  = "d/dt Na_Bsl in component Na_Buffers (mM)";
		rates[27]  = "d/dt Tn_CL in component Cytosolic_Ca_Buffers (mM)";
		rates[28]  = "d/dt Tn_CHc in component Cytosolic_Ca_Buffers (mM)";
		rates[29]  = "d/dt Tn_CHm in component Cytosolic_Ca_Buffers (mM)";
		rates[30]  = "d/dt CaM in component Cytosolic_Ca_Buffers (mM)";
		rates[31]  = "d/dt Myo_c in component Cytosolic_Ca_Buffers (mM)";
		rates[32]  = "d/dt Myo_m in component Cytosolic_Ca_Buffers (mM)";
		rates[33]  = "d/dt SRB in component Cytosolic_Ca_Buffers (mM)";
		rates[34]  = "d/dt SLL_j in component Junctional_and_SL_Ca_Buffers (mM)";
		rates[35]  = "d/dt SLL_sl in component Junctional_and_SL_Ca_Buffers (mM)";
		rates[36]  = "d/dt SLH_j in component Junctional_and_SL_Ca_Buffers (mM)";
		rates[37]  = "d/dt SLH_sl in component Junctional_and_SL_Ca_Buffers (mM)";
		rates[38]  = "d/dt Csqn_b in component SR_Ca_Concentrations (mM)";
		rates[23]  = "d/dt Ca_sr in component SR_Ca_Concentrations (mM)";
		rates[1]  = "d/dt Na_j in component Na_Concentrations (mM)";
		rates[2]  = "d/dt Na_sl in component Na_Concentrations (mM)";
		rates[11]  = "d/dt Na_i in component Na_Concentrations (mM)";
		rates[3]  = "d/dt K_i in component K_Concentration (mM)";
		rates[4]  = "d/dt Ca_j in component Ca_Concentrations (mM)";
		rates[5]  = "d/dt Ca_sl in component Ca_Concentrations (mM)";
		rates[24]  = "d/dt Ca_i in component Ca_Concentrations (mM)";
		rates[0]  = "d/dt V_m in component membrane_potential (mV)";
	}

	void initConsts(double* constants, double* states){
		states[0] = -81.4229700631461;
		constants[0] = 5.4;
		constants[1] = 140;
		constants[2] = 1.8;
		constants[3] = 23;
		constants[4] = 0.5;
		constants[5] = 4.5;
		constants[6] = 0.0053114;
		constants[7] = 25;
		states[1] = 8.3215690202059;
		states[2] = 8.32094589677861;
		states[3] = 120;
		states[4] = 0.000175415190830688;
		states[5] = 0.000106544589194246;
		states[6] = 0.00381858135062259;
		states[7] = 0.625086621635645;
		states[8] = 0.62332507235506;
		constants[8] = 0;
		constants[9] = 0;
		constants[10] = 0.035;
		states[9] = 0.021733554982663;
		constants[11] = 0.0035;
		states[10] = 0.00428981903391989;
		states[11] = 8.32114502072456;
		constants[12] = 1;
		states[12] = 0.000441539203559411;
		states[13] = 0.784875334693892;
		states[14] = 0.000441531250866821;
		states[15] = 0.999995817153572;
		constants[13] = 0.35;
		states[16] = 2.93982287251302e-6;
		states[17] = 0.99511673495949;
		states[18] = 0.0246142436477748;
		states[19] = 0.0152416826209301;
		states[20] = 0.891022230597263;
		states[21] = 7.37484660389498e-7;
		states[22] = 9.01984485847386e-8;
		constants[14] = 5.348e-6;
		states[23] = 0.555180633859957;
		states[24] = 8.72745589849657e-5;
		states[25] = 3.43545459048316;
		states[26] = 0.749601264899653;
		states[27] = 0.00893708435270205;
		states[28] = 0.117445983314504;
		states[29] = 0.0105996734077994;
		states[30] = 0.000295653619580701;
		states[31] = 0.00192645052472679;
		states[32] = 0.137557201546068;
		states[33] = 0.00217414510791738;
		states[34] = 0.00738583890572642;
		states[35] = 0.00988178900584875;
		states[36] = 0.0734662466011574;
		states[37] = 0.114400081504523;
		states[38] = 1.19772047585784;
		constants[15] = 1;
		constants[16] = 100;
		constants[17] = 1000;
		constants[18] = 5;
		constants[19] = -9.5;
		constants[20] = 1.00000;
		constants[21] = 8314.00;
		constants[22] = 1.38100e-10;
		constants[23] = 100.000;
		constants[24] = 0.160000;
		constants[25] = 0.450000;
		constants[26] = 0.500000;
		constants[27] = 1.64000e-06;
		constants[28] = 1.22000e-06;
		constants[29] = 1.09000e-05;
		constants[30] = 1.79000e-05;
		constants[31] = 8.24130e-13;
		constants[32] = 3.27430e-12;
		constants[33] = 1.83130e-14;
		constants[34] = 1.63860e-12;
		constants[35] = 0.110000;
		constants[36] = 0.900000;
		constants[37] = 1.00000;
		constants[38] = 0.000597000;
		constants[39] =  1.00000*1.80000;
		constants[40] = 11.0000;
		constants[41] = 1.50000;
		constants[42] = 1.63000;
		constants[43] = 1.39000;
		constants[44] = 0.0183300;
		constants[45] =  2.00000*0.00100000;
		constants[46] =  0.500000*0.109625;
		constants[47] =  1.00000*0.00900000;
		constants[48] = 0.100000;
		constants[49] =  0.500000*1.50000e-08;
		constants[50] =  constants[4]*0.000540000;
		constants[51] =  0.500000*2.70000e-07;
		constants[52] = 1.80000;
		constants[53] = 0.00359000;
		constants[54] = 1.30000;
		constants[55] = 12.2900;
		constants[56] = 87.5000;
		constants[57] = 0.320000;
		constants[58] = 0.270000;
		constants[59] = 0.000150000;
		constants[60] = 1.57000;
		constants[61] = 0.0673000;
		constants[62] = 0.000500000;
		constants[63] = 0.000551300;
		constants[64] = 2.35000;
		constants[65] = 2.60000;
		constants[66] = 0.000246000;
		constants[67] = 1.70000;
		constants[68] = 1.78700;
		constants[69] = 10.0000;
		constants[70] = 0.0600000;
		constants[71] = 0.00500000;
		constants[72] = 0.450000;
		constants[73] = 7.56100;
		constants[74] = 1.65000;
		constants[75] = 0.00100000;
		constants[76] = 0.000100000;
		constants[77] = 0.0700000;
		constants[78] = 0.0196000;
		constants[79] = 32.7000;
		constants[80] = 0.140000;
		constants[81] = 3.20000e-05;
		constants[82] = 2.37000;
		constants[83] = 0.00333000;
		constants[84] = 0.00300000;
		constants[85] = 0.0240000;
		constants[86] = 0.238000;
		constants[87] = 34.0000;
		constants[88] = 0.140000;
		constants[89] = 0.000460000;
		constants[90] = 13.8000;
		constants[91] = 5.70000e-05;
		constants[92] = 0.0157000;
		constants[93] =  19.0000*0.000900000;
		constants[94] = 0.0600000;
		constants[95] = 100.000;
		constants[96] = 1.30000;
		constants[97] = 100.000;
		constants[98] = 0.0300000;
		constants[99] = 100.000;
		constants[100] = 65.0000;
		constants[101] = 100.000;
		constants[102] = (exp(constants[1]/67.3000) - 1.00000)/7.00000;
		constants[103] =  constants[10]* pow((constants[0]/5.40000), 1.0 / 2);
		constants[104] = 0.00350000;
		constants[105] = 0.00000;
		constants[106] = 0.00000;
		constants[107] = 15.0000;
		constants[108] = 1.00000;
		constants[135] = 0.00000;
		constants[109] = 96485.0;
		constants[110] = 10.2500;
		constants[111] = 0.0150000;
		constants[112] = 1.00000 - constants[35];
		constants[113] = 1.00000 - constants[36];
		constants[114] = (constants[20]==1.00000 ?  1.00000*0.130000*0.120000 :  0.130000*0.300000*0.964000);
		constants[115] = (constants[20]==1.00000 ?  constants[12]*1.00000*0.130000*0.880000 :  constants[12]*0.130000*0.300000*0.0360000);
		constants[116] = 0.500000;
		constants[117] = 310.000;
		constants[118] =   3.14159265358979*pow(constants[110], 2.00000)*constants[23]*1.00000e-15;
		constants[119] =  20150.0* 3.14159265358979*2.00000*constants[24]*constants[111];
		constants[120] =   3.14159265358979*2.00000*constants[110]*constants[23];
		constants[121] = constants[109]/( constants[21]*constants[117]);
		constants[122] = (constants[117] - 310.000)/10.0000;
		constants[123] =  0.650000*constants[118];
		constants[124] =  0.0350000*constants[118];
		constants[125] =  0.0200000*constants[118];
		constants[126] =  0.0539000*0.0100000*constants[118];
		constants[127] = 15.0000;
		constants[128] = 150.000;
		constants[129] = ( 0.0374000*constants[123])/constants[125];
		constants[130] =  (( 0.00460000*constants[123])/constants[126])*0.100000;
		constants[131] = ( 0.0134000*constants[123])/constants[125];
		constants[132] =  (( 0.00165000*constants[123])/constants[126])*0.100000;
		constants[133] = ( 0.140000*constants[123])/constants[124];
		constants[134] =  (1.00000/constants[121])*log(constants[127]/constants[128]);
	}

	void computeRates(double VoI, double* constants, double* rates, double* states, double* algebraic){
		rates[3] = constants[135];
		rates[18] =  (( 1.70000*states[4])/1.00000)*(1.00000 - states[18]) -  0.0119000*states[18];
		rates[19] =  (( 1.70000*states[5])/1.00000)*(1.00000 - states[19]) -  0.0119000*states[19];
		rates[27] =  constants[79]*states[24]*(constants[77] - states[27]) -  constants[78]*states[27];
		rates[28] =  constants[82]*states[24]*((constants[80] - states[28]) - states[29]) -  constants[81]*states[28];
		rates[29] =  constants[84]*constants[37]*((constants[80] - states[28]) - states[29]) -  constants[83]*states[29];
		rates[30] =  constants[87]*states[24]*(constants[85] - states[30]) -  constants[86]*states[30];
		rates[31] =  constants[90]*states[24]*((constants[88] - states[31]) - states[32]) -  constants[89]*states[31];
		rates[32] =  constants[92]*constants[37]*((constants[88] - states[31]) - states[32]) -  constants[91]*states[32];
		rates[33] =  constants[95]*states[24]*(constants[93] - states[33]) -  constants[94]*states[33];
		rates[34] =  constants[97]*states[4]*(constants[130] - states[34]) -  constants[96]*states[34];
		rates[35] =  constants[97]*states[5]*(constants[129] - states[35]) -  constants[96]*states[35];
		rates[36] =  constants[99]*states[4]*(constants[132] - states[36]) -  constants[98]*states[36];
		rates[37] =  constants[99]*states[5]*(constants[131] - states[37]) -  constants[98]*states[37];
		rates[38] =  constants[101]*states[23]*(constants[133] - states[38]) -  constants[100]*states[38];
		rates[11] =  constants[15]*( (constants[34]/constants[123])*(states[2] - states[11]));
		algebraic[0] = 1.00000/pow(1.00000+exp(- (56.8600+states[0])/9.03000), 2.00000);
		algebraic[11] =  0.129200*exp(- pow((states[0]+45.7900)/15.5400, 2.00000))+ 0.0648700*exp(- pow((states[0] - 4.82300)/51.1200, 2.00000));
		rates[6] = (algebraic[0] - states[6])/algebraic[11];
		algebraic[3] = 1.00000/(1.00000+exp(- (states[0]+10.0000)/5.00000));
		algebraic[14] = ( (550.000/(1.00000+exp((- 22.0000 - states[0])/9.00000)))*6.00000)/(1.00000+exp((states[0] - - 11.0000)/9.00000))+230.000/(1.00000+exp((states[0] - - 40.0000)/20.0000));
		rates[9] = (algebraic[3] - states[9])/algebraic[14];
		algebraic[4] = 1.00000/(1.00000+exp(- (states[0]+3.80000)/14.2500));
		algebraic[15] = 990.100/(1.00000+exp(- (states[0]+2.43600)/14.1200));
		rates[10] = (algebraic[4] - states[10])/algebraic[15];
		algebraic[5] = 1.00000/(1.00000+exp(- (states[0] - 19.0000)/13.0000));
		algebraic[16] = 9.00000/(1.00000+exp((states[0]+3.00000)/15.0000))+0.500000;
		rates[12] = (algebraic[5] - states[12])/algebraic[16];
		algebraic[6] = 1.00000/(1.00000+exp((states[0]+19.5000)/5.00000));
		algebraic[17] = 800.000/(1.00000+exp((states[0]+60.0000)/10.0000))+30.0000;
		rates[13] = (algebraic[6] - states[13])/algebraic[17];
		algebraic[18] =  8.50000*exp(- pow((states[0]+45.0000)/50.0000, 2.00000))+0.500000;
		rates[14] = (algebraic[5] - states[14])/algebraic[18];
		algebraic[19] =  85.0000*exp(- pow(states[0]+40.0000, 2.00000)/220.000)+7.00000;
		rates[15] = (algebraic[6] - states[15])/algebraic[19];
		algebraic[8] = 1.00000/(1.00000+exp(- (states[0]+5.00000)/6.00000));
		algebraic[20] = ( 1.00000*algebraic[8]*(1.00000 - exp(- (states[0]+5.00000)/6.00000)))/( 0.0350000*(states[0]+5.00000));
		rates[16] = (algebraic[8] - states[16])/algebraic[20];
		algebraic[7] = 1.00000/(1.00000+exp((states[0]+35.0000)/9.00000))+0.600000/(1.00000+exp((50.0000 - states[0])/20.0000));
		algebraic[21] = 1.00000/( 0.0197000*exp(- pow( 0.0337000*(states[0]+14.5000), 2.00000))+0.0200000);
		rates[17] = (algebraic[7] - states[17])/algebraic[21];
		algebraic[10] = constants[107] - (constants[107] - constants[108])/(1.00000+pow(constants[72]/states[23], 2.50000));
		algebraic[23] = constants[69]/algebraic[10];
		algebraic[27] =  constants[116]*algebraic[10];
		rates[21] = ( algebraic[23]*pow(states[4], 2.00000)*states[20] -  constants[70]*states[21]) - ( algebraic[27]*states[4]*states[21] -  constants[71]*states[22]);
		algebraic[1] = (states[0]>=- 40.0000 ? 0.00000 :  0.0570000*exp(- ((states[0]+80.0000) - constants[8])/6.80000));
		algebraic[12] = (states[0]>=- 40.0000 ? 0.770000/( 0.130000*(1.00000+exp(- ((states[0]+10.6600) - constants[8])/11.1000))) :  2.70000*exp( 0.0790000*(states[0] - constants[8]))+ 310000.*exp( 0.348500*(states[0] - constants[8])));
		algebraic[24] = 1.00000/(algebraic[1]+algebraic[12]);
		algebraic[28] = ( 1.00000*(1.00000 - constants[9]/100.000))/pow(1.00000+exp(((states[0]+71.5500) - constants[8])/7.43000), 2.00000)+constants[9]/100.000;
		rates[7] = (algebraic[28] - states[7])/algebraic[24];
		algebraic[2] = (states[0]>=- 40.0000 ? 0.00000 : ( ( - 25428.0*exp( 0.244400*(states[0] - constants[8])) -  6.94800e-06*exp( - 0.0439100*(states[0] - constants[8])))*(states[0]+37.7800))/(1.00000+exp( 0.311000*((states[0]+79.2300) - constants[8]))));
		algebraic[13] = (states[0]>=- 40.0000 ? ( 0.600000*exp( 0.0570000*(states[0] - constants[8])))/(1.00000+exp( - 0.100000*((states[0]+32.0000) - constants[8]))) : ( 0.0242400*exp( - 0.0105200*(states[0] - constants[8])))/(1.00000+exp( - 0.137800*((states[0]+40.1400) - constants[8]))));
		algebraic[25] = 1.00000/(algebraic[2]+algebraic[13]);
		algebraic[29] = ( 1.00000*(1.00000 - constants[9]/100.000))/pow(1.00000+exp(((states[0]+71.5500) - constants[8])/7.43000), 2.00000)+constants[9]/100.000;
		rates[8] = (algebraic[29] - states[8])/algebraic[25];
		algebraic[31] = ((1.00000 - states[20]) - states[21]) - states[22];
		rates[20] = ( constants[71]*algebraic[31] -  algebraic[27]*states[4]*states[20]) - ( algebraic[23]*pow(states[4], 2.00000)*states[20] -  constants[70]*states[21]);
		rates[22] = ( algebraic[27]*states[4]*states[21] -  constants[71]*states[22]) - ( constants[70]*states[22] -  algebraic[23]*pow(states[4], 2.00000)*algebraic[31]);
		algebraic[96] =  (( constants[7]*states[21])/1.00000)*(states[23] - states[4]);
		algebraic[97] = ( pow(constants[65], constants[122])*constants[6]*(pow(states[24]/constants[66], constants[68]) - pow(states[23]/constants[67], constants[68])))/(1.00000+pow(states[24]/constants[66], constants[68])+pow(states[23]/constants[67], constants[68]));
		algebraic[98] =  constants[14]*(states[23] - states[4]);
		rates[23] = (algebraic[97] - (( algebraic[98]*constants[123])/constants[124]+algebraic[96])) - ( constants[101]*states[23]*(constants[133] - states[38]) -  constants[100]*states[38]);
		algebraic[99] = ((((((((((( constants[79]*states[24]*(constants[77] - states[27]) -  constants[78]*states[27])+ constants[82]*states[24]*((constants[80] - states[28]) - states[29])) -  constants[81]*states[28])+ constants[84]*constants[37]*((constants[80] - states[28]) - states[29])) -  constants[83]*states[29])+ constants[87]*states[24]*(constants[85] - states[30])) -  constants[86]*states[30])+ constants[90]*states[24]*((constants[88] - states[31]) - states[32])) -  constants[89]*states[31])+ constants[92]*constants[37]*((constants[88] - states[31]) - states[32])) -  constants[91]*states[32])+( constants[95]*states[24]*(constants[93] - states[33]) -  constants[94]*states[33]);
		rates[24] = (( - algebraic[97]*constants[124])/constants[123] - algebraic[99])+ (constants[32]/constants[123])*(states[5] - states[24]);
		algebraic[100] =  constants[76]*states[1]*(constants[73] - states[25]) -  constants[75]*states[25];
		rates[25] = algebraic[100];
		algebraic[101] =  constants[76]*states[2]*(constants[74] - states[26]) -  constants[75]*states[26];
		rates[26] = algebraic[101];
		algebraic[9] =  (1.00000/constants[121])*log(constants[1]/states[1]);
		algebraic[33] =  constants[35]*constants[3]*pow(states[6], 3.00000)*states[7]*states[8]*(states[0] - algebraic[9]);
		algebraic[36] =  constants[35]*constants[38]*(states[0] - algebraic[9]);
		algebraic[39] = 1.00000/(1.00000+ 0.124500*exp( - 0.100000*states[0]*constants[121])+ 0.0365000*constants[102]*exp( - states[0]*constants[121]));
		algebraic[40] = (( constants[35]*constants[39]*algebraic[39]*constants[0])/(1.00000+pow(constants[40]/states[1], 4.00000)))/(constants[0]+constants[41]);
		algebraic[67] = ( constants[49]*states[0]*constants[109]*constants[121]*( 0.750000*states[1]*exp( states[0]*constants[121]) -  0.750000*constants[1]))/(exp( states[0]*constants[121]) - 1.00000);
		algebraic[73] =  constants[36]*algebraic[67]*states[16]*states[17]*((1.00000 - states[18])+constants[106])*pow(constants[52], constants[122])*0.450000*1.00000;
		algebraic[76] = 1.00000/(1.00000+pow(constants[59]/states[4], 2.00000));
		algebraic[79] =  exp( constants[58]*states[0]*constants[121])*pow(states[1], 3.00000)*constants[2];
		algebraic[81] =  exp( (constants[58] - 1.00000)*states[0]*constants[121])*pow(constants[1], 3.00000)*states[4];
		algebraic[82] =  constants[53]*pow(constants[1], 3.00000)*(1.00000+pow(states[1]/constants[55], 3.00000))+ pow(constants[56], 3.00000)*states[4]*(1.00000+states[4]/constants[53])+ constants[54]*pow(states[1], 3.00000)+ pow(states[1], 3.00000)*constants[2]+ pow(constants[1], 3.00000)*states[4];
		algebraic[85] = (( constants[35]*constants[5]*pow(constants[60], constants[122])*algebraic[76]*(algebraic[79] - algebraic[81]))/algebraic[82])/(1.00000+ constants[57]*exp( (constants[58] - 1.00000)*states[0]*constants[121]));
		algebraic[104] = algebraic[33]+algebraic[36]+ 3.00000*algebraic[85]+ 3.00000*algebraic[40]+algebraic[73];
		rates[1] =  constants[15]*((( - algebraic[104]*constants[22])/( constants[126]*constants[109])+ (constants[33]/constants[126])*(states[2] - states[1])) - algebraic[100]);
		algebraic[22] =  (1.00000/constants[121])*log(constants[1]/states[2]);
		algebraic[34] =  constants[112]*constants[3]*pow(states[6], 3.00000)*states[7]*states[8]*(states[0] - algebraic[22]);
		algebraic[37] =  constants[112]*constants[38]*(states[0] - algebraic[22]);
		algebraic[41] = (( constants[112]*constants[39]*algebraic[39]*constants[0])/(1.00000+pow(constants[40]/states[2], 4.00000)))/(constants[0]+constants[41]);
		algebraic[68] = ( constants[49]*states[0]*constants[109]*constants[121]*( 0.750000*states[2]*exp( states[0]*constants[121]) -  0.750000*constants[1]))/(exp( states[0]*constants[121]) - 1.00000);
		algebraic[74] =  constants[113]*algebraic[68]*states[16]*states[17]*((1.00000 - states[19])+constants[105])*pow(constants[52], constants[122])*0.450000*1.00000;
		algebraic[78] = 1.00000/(1.00000+pow(constants[59]/states[5], 2.00000));
		algebraic[80] =  exp( constants[58]*states[0]*constants[121])*pow(states[2], 3.00000)*constants[2];
		algebraic[83] =  exp( (constants[58] - 1.00000)*states[0]*constants[121])*pow(constants[1], 3.00000)*states[5];
		algebraic[84] =  constants[53]*pow(constants[1], 3.00000)*(1.00000+pow(states[2]/constants[55], 3.00000))+ pow(constants[56], 3.00000)*states[5]*(1.00000+states[5]/constants[53])+ constants[54]*pow(states[2], 3.00000)+ pow(states[2], 3.00000)*constants[2]+ pow(constants[1], 3.00000)*states[5];
		algebraic[86] = (( constants[112]*constants[5]*pow(constants[60], constants[122])*algebraic[78]*(algebraic[80] - algebraic[83]))/algebraic[84])/(1.00000+ constants[57]*exp( (constants[58] - 1.00000)*states[0]*constants[121]));
		algebraic[105] = algebraic[34]+algebraic[37]+ 3.00000*algebraic[86]+ 3.00000*algebraic[41]+algebraic[74];
		rates[2] =  constants[15]*((( - algebraic[105]*constants[22])/( constants[125]*constants[109])+ (constants[33]/constants[125])*(states[1] - states[2])+ (constants[34]/constants[125])*(states[11] - states[2])) - algebraic[101]);
		algebraic[102] = ( constants[97]*states[4]*(constants[130] - states[34]) -  constants[96]*states[34])+( constants[99]*states[4]*(constants[132] - states[36]) -  constants[98]*states[36]);
		algebraic[64] = ( constants[50]*4.00000*states[0]*constants[109]*constants[121]*( 0.341000*states[4]*exp( 2.00000*states[0]*constants[121]) -  0.341000*constants[2]))/(exp( 2.00000*states[0]*constants[121]) - 1.00000);
		algebraic[69] =  constants[36]*algebraic[64]*states[16]*states[17]*((1.00000 - states[18])+constants[106])*pow(constants[52], constants[122])*0.450000*1.00000;
		algebraic[89] = ( constants[35]*pow(constants[64], constants[122])*constants[61]*pow(states[4], 1.60000))/(pow(constants[62], 1.60000)+pow(states[4], 1.60000));
		algebraic[30] =  ((1.00000/constants[121])/2.00000)*log(constants[2]/states[4]);
		algebraic[93] =  constants[35]*constants[63]*(states[0] - algebraic[30]);
		algebraic[107] = (algebraic[69]+algebraic[93]+algebraic[89]) -  2.00000*algebraic[85];
		rates[4] = ((( - algebraic[107]*constants[22])/( constants[126]*2.00000*constants[109])+ (constants[31]/constants[126])*(states[5] - states[4])) - algebraic[102])+( algebraic[96]*constants[124])/constants[126]+( algebraic[98]*constants[123])/constants[126];
		algebraic[103] = ( constants[97]*states[5]*(constants[129] - states[35]) -  constants[96]*states[35])+( constants[99]*states[5]*(constants[131] - states[37]) -  constants[98]*states[37]);
		algebraic[65] = ( constants[50]*4.00000*states[0]*constants[109]*constants[121]*( 0.341000*states[5]*exp( 2.00000*states[0]*constants[121]) -  0.341000*constants[2]))/(exp( 2.00000*states[0]*constants[121]) - 1.00000);
		algebraic[70] =  constants[113]*algebraic[65]*states[16]*states[17]*((1.00000 - states[19])+constants[105])*pow(constants[52], constants[122])*0.450000*1.00000;
		algebraic[91] = ( constants[112]*pow(constants[64], constants[122])*constants[61]*pow(states[5], 1.60000))/(pow(constants[62], 1.60000)+pow(states[5], 1.60000));
		algebraic[32] =  ((1.00000/constants[121])/2.00000)*log(constants[2]/states[5]);
		algebraic[94] =  constants[112]*constants[63]*(states[0] - algebraic[32]);
		algebraic[108] = (algebraic[70]+algebraic[94]+algebraic[91]) -  2.00000*algebraic[86];
		rates[5] = (( - algebraic[108]*constants[22])/( constants[125]*2.00000*constants[109])+ (constants[31]/constants[125])*(states[4] - states[5])+ (constants[32]/constants[125])*(states[24] - states[5])) - algebraic[103];
		algebraic[42] = algebraic[40]+algebraic[41];
		algebraic[26] =  (1.00000/constants[121])*log(constants[0]/states[3]);
		algebraic[43] = 1.00000/(1.00000+exp((states[0]+74.0000)/24.0000));
		algebraic[44] =  constants[103]*states[9]*algebraic[43]*(states[0] - algebraic[26]);
		algebraic[45] = 1.00000/(1.00000+exp(7.48800 - states[0]/5.98000));
		algebraic[46] =  constants[35]*constants[45]*algebraic[45]*(states[0] - algebraic[26]);
		algebraic[47] =  constants[112]*constants[45]*algebraic[45]*(states[0] - algebraic[26]);
		algebraic[48] = algebraic[46]+algebraic[47];
		algebraic[49] =  (1.00000/constants[121])*log((constants[0]+ constants[44]*constants[1])/(states[3]+ constants[44]*states[11]));
		algebraic[50] =  constants[35]*constants[104]*pow(states[10], 2.00000)*(states[0] - algebraic[49]);
		algebraic[51] =  constants[112]*constants[11]*pow(states[10], 2.00000)*(states[0] - algebraic[49]);
		algebraic[52] = algebraic[50]+algebraic[51];
		algebraic[53] =  constants[114]*states[12]*states[13]*(states[0] - algebraic[26]);
		algebraic[54] =  constants[115]*states[14]*states[15]*(states[0] - algebraic[26]);
		algebraic[55] = algebraic[53]+algebraic[54];
		algebraic[56] = 1.02000/(1.00000+exp( 0.238500*((states[0] - algebraic[26]) - 59.2150)));
		algebraic[57] = ( 0.491240*exp( 0.0803200*((states[0]+5.47600) - algebraic[26]))+exp( 0.0617500*((states[0] - algebraic[26]) - 594.310)))/(1.00000+exp( - 0.514300*((states[0] - algebraic[26])+4.75300)));
		algebraic[58] = algebraic[56]/(algebraic[56]+algebraic[57]);
		algebraic[59] =  1.00000*constants[13]* pow((constants[0]/5.40000), 1.0 / 2)*algebraic[58]*(states[0] - algebraic[26]);
		algebraic[66] = ( constants[51]*states[0]*constants[109]*constants[121]*( 0.750000*states[3]*exp( states[0]*constants[121]) -  0.750000*constants[0]))/(exp( states[0]*constants[121]) - 1.00000);
		algebraic[72] =  algebraic[66]*states[16]*states[17]*( constants[36]*(constants[106]+(1.00000 - states[18]))+ constants[113]*(constants[105]+(1.00000 - states[19])))*pow(constants[52], constants[122])*0.450000*1.00000;
		algebraic[106] = ((algebraic[55]+algebraic[44]+algebraic[52]+algebraic[59]) -  2.00000*algebraic[42])+algebraic[72]+algebraic[48];
		algebraic[110] = algebraic[104]+algebraic[105];
		algebraic[60] =  (( constants[35]*constants[46])/(1.00000+constants[48]/states[4]))*(states[0] - constants[134]);
		algebraic[61] =  (( constants[112]*constants[46])/(1.00000+constants[48]/states[5]))*(states[0] - constants[134]);
		algebraic[62] = algebraic[60]+algebraic[61];
		algebraic[63] =  constants[47]*(states[0] - constants[134]);
		algebraic[111] = algebraic[62]+algebraic[63];
		algebraic[112] = algebraic[107]+algebraic[108];
		algebraic[113] = algebraic[110]+algebraic[111]+algebraic[112]+algebraic[106];
		algebraic[109] = (VoI -  floor(VoI/constants[17])*constants[17]>=constants[16]&&VoI -  floor(VoI/constants[17])*constants[17]<=constants[16]+constants[18] ? constants[19] : 0.00000);
		rates[0] = - (algebraic[113]+algebraic[109]);
	}

	void computeVariables(double VoI, double* constants, double* rates, double* states, double* algebraic){
		algebraic[0] = 1.00000/pow(1.00000+exp(- (56.8600+states[0])/9.03000), 2.00000);
		algebraic[11] =  0.129200*exp(- pow((states[0]+45.7900)/15.5400, 2.00000))+ 0.0648700*exp(- pow((states[0] - 4.82300)/51.1200, 2.00000));
		algebraic[3] = 1.00000/(1.00000+exp(- (states[0]+10.0000)/5.00000));
		algebraic[14] = ( (550.000/(1.00000+exp((- 22.0000 - states[0])/9.00000)))*6.00000)/(1.00000+exp((states[0] - - 11.0000)/9.00000))+230.000/(1.00000+exp((states[0] - - 40.0000)/20.0000));
		algebraic[4] = 1.00000/(1.00000+exp(- (states[0]+3.80000)/14.2500));
		algebraic[15] = 990.100/(1.00000+exp(- (states[0]+2.43600)/14.1200));
		algebraic[5] = 1.00000/(1.00000+exp(- (states[0] - 19.0000)/13.0000));
		algebraic[16] = 9.00000/(1.00000+exp((states[0]+3.00000)/15.0000))+0.500000;
		algebraic[6] = 1.00000/(1.00000+exp((states[0]+19.5000)/5.00000));
		algebraic[17] = 800.000/(1.00000+exp((states[0]+60.0000)/10.0000))+30.0000;
		algebraic[18] =  8.50000*exp(- pow((states[0]+45.0000)/50.0000, 2.00000))+0.500000;
		algebraic[19] =  85.0000*exp(- pow(states[0]+40.0000, 2.00000)/220.000)+7.00000;
		algebraic[8] = 1.00000/(1.00000+exp(- (states[0]+5.00000)/6.00000));
		algebraic[20] = ( 1.00000*algebraic[8]*(1.00000 - exp(- (states[0]+5.00000)/6.00000)))/( 0.0350000*(states[0]+5.00000));
		algebraic[7] = 1.00000/(1.00000+exp((states[0]+35.0000)/9.00000))+0.600000/(1.00000+exp((50.0000 - states[0])/20.0000));
		algebraic[21] = 1.00000/( 0.0197000*exp(- pow( 0.0337000*(states[0]+14.5000), 2.00000))+0.0200000);
		algebraic[10] = constants[107] - (constants[107] - constants[108])/(1.00000+pow(constants[72]/states[23], 2.50000));
		algebraic[23] = constants[69]/algebraic[10];
		algebraic[27] =  constants[116]*algebraic[10];
		algebraic[1] = (states[0]>=- 40.0000 ? 0.00000 :  0.0570000*exp(- ((states[0]+80.0000) - constants[8])/6.80000));
		algebraic[12] = (states[0]>=- 40.0000 ? 0.770000/( 0.130000*(1.00000+exp(- ((states[0]+10.6600) - constants[8])/11.1000))) :  2.70000*exp( 0.0790000*(states[0] - constants[8]))+ 310000.*exp( 0.348500*(states[0] - constants[8])));
		algebraic[24] = 1.00000/(algebraic[1]+algebraic[12]);
		algebraic[28] = ( 1.00000*(1.00000 - constants[9]/100.000))/pow(1.00000+exp(((states[0]+71.5500) - constants[8])/7.43000), 2.00000)+constants[9]/100.000;
		algebraic[2] = (states[0]>=- 40.0000 ? 0.00000 : ( ( - 25428.0*exp( 0.244400*(states[0] - constants[8])) -  6.94800e-06*exp( - 0.0439100*(states[0] - constants[8])))*(states[0]+37.7800))/(1.00000+exp( 0.311000*((states[0]+79.2300) - constants[8]))));
		algebraic[13] = (states[0]>=- 40.0000 ? ( 0.600000*exp( 0.0570000*(states[0] - constants[8])))/(1.00000+exp( - 0.100000*((states[0]+32.0000) - constants[8]))) : ( 0.0242400*exp( - 0.0105200*(states[0] - constants[8])))/(1.00000+exp( - 0.137800*((states[0]+40.1400) - constants[8]))));
		algebraic[25] = 1.00000/(algebraic[2]+algebraic[13]);
		algebraic[29] = ( 1.00000*(1.00000 - constants[9]/100.000))/pow(1.00000+exp(((states[0]+71.5500) - constants[8])/7.43000), 2.00000)+constants[9]/100.000;
		algebraic[31] = ((1.00000 - states[20]) - states[21]) - states[22];
		algebraic[96] =  (( constants[7]*states[21])/1.00000)*(states[23] - states[4]);
		algebraic[97] = ( pow(constants[65], constants[122])*constants[6]*(pow(states[24]/constants[66], constants[68]) - pow(states[23]/constants[67], constants[68])))/(1.00000+pow(states[24]/constants[66], constants[68])+pow(states[23]/constants[67], constants[68]));
		algebraic[98] =  constants[14]*(states[23] - states[4]);
		algebraic[99] = ((((((((((( constants[79]*states[24]*(constants[77] - states[27]) -  constants[78]*states[27])+ constants[82]*states[24]*((constants[80] - states[28]) - states[29])) -  constants[81]*states[28])+ constants[84]*constants[37]*((constants[80] - states[28]) - states[29])) -  constants[83]*states[29])+ constants[87]*states[24]*(constants[85] - states[30])) -  constants[86]*states[30])+ constants[90]*states[24]*((constants[88] - states[31]) - states[32])) -  constants[89]*states[31])+ constants[92]*constants[37]*((constants[88] - states[31]) - states[32])) -  constants[91]*states[32])+( constants[95]*states[24]*(constants[93] - states[33]) -  constants[94]*states[33]);
		algebraic[100] =  constants[76]*states[1]*(constants[73] - states[25]) -  constants[75]*states[25];
		algebraic[101] =  constants[76]*states[2]*(constants[74] - states[26]) -  constants[75]*states[26];
		algebraic[9] =  (1.00000/constants[121])*log(constants[1]/states[1]);
		algebraic[33] =  constants[35]*constants[3]*pow(states[6], 3.00000)*states[7]*states[8]*(states[0] - algebraic[9]);
		algebraic[36] =  constants[35]*constants[38]*(states[0] - algebraic[9]);
		algebraic[39] = 1.00000/(1.00000+ 0.124500*exp( - 0.100000*states[0]*constants[121])+ 0.0365000*constants[102]*exp( - states[0]*constants[121]));
		algebraic[40] = (( constants[35]*constants[39]*algebraic[39]*constants[0])/(1.00000+pow(constants[40]/states[1], 4.00000)))/(constants[0]+constants[41]);
		algebraic[67] = ( constants[49]*states[0]*constants[109]*constants[121]*( 0.750000*states[1]*exp( states[0]*constants[121]) -  0.750000*constants[1]))/(exp( states[0]*constants[121]) - 1.00000);
		algebraic[73] =  constants[36]*algebraic[67]*states[16]*states[17]*((1.00000 - states[18])+constants[106])*pow(constants[52], constants[122])*0.450000*1.00000;
		algebraic[76] = 1.00000/(1.00000+pow(constants[59]/states[4], 2.00000));
		algebraic[79] =  exp( constants[58]*states[0]*constants[121])*pow(states[1], 3.00000)*constants[2];
		algebraic[81] =  exp( (constants[58] - 1.00000)*states[0]*constants[121])*pow(constants[1], 3.00000)*states[4];
		algebraic[82] =  constants[53]*pow(constants[1], 3.00000)*(1.00000+pow(states[1]/constants[55], 3.00000))+ pow(constants[56], 3.00000)*states[4]*(1.00000+states[4]/constants[53])+ constants[54]*pow(states[1], 3.00000)+ pow(states[1], 3.00000)*constants[2]+ pow(constants[1], 3.00000)*states[4];
		algebraic[85] = (( constants[35]*constants[5]*pow(constants[60], constants[122])*algebraic[76]*(algebraic[79] - algebraic[81]))/algebraic[82])/(1.00000+ constants[57]*exp( (constants[58] - 1.00000)*states[0]*constants[121]));
		algebraic[104] = algebraic[33]+algebraic[36]+ 3.00000*algebraic[85]+ 3.00000*algebraic[40]+algebraic[73];
		algebraic[22] =  (1.00000/constants[121])*log(constants[1]/states[2]);
		algebraic[34] =  constants[112]*constants[3]*pow(states[6], 3.00000)*states[7]*states[8]*(states[0] - algebraic[22]);
		algebraic[37] =  constants[112]*constants[38]*(states[0] - algebraic[22]);
		algebraic[41] = (( constants[112]*constants[39]*algebraic[39]*constants[0])/(1.00000+pow(constants[40]/states[2], 4.00000)))/(constants[0]+constants[41]);
		algebraic[68] = ( constants[49]*states[0]*constants[109]*constants[121]*( 0.750000*states[2]*exp( states[0]*constants[121]) -  0.750000*constants[1]))/(exp( states[0]*constants[121]) - 1.00000);
		algebraic[74] =  constants[113]*algebraic[68]*states[16]*states[17]*((1.00000 - states[19])+constants[105])*pow(constants[52], constants[122])*0.450000*1.00000;
		algebraic[78] = 1.00000/(1.00000+pow(constants[59]/states[5], 2.00000));
		algebraic[80] =  exp( constants[58]*states[0]*constants[121])*pow(states[2], 3.00000)*constants[2];
		algebraic[83] =  exp( (constants[58] - 1.00000)*states[0]*constants[121])*pow(constants[1], 3.00000)*states[5];
		algebraic[84] =  constants[53]*pow(constants[1], 3.00000)*(1.00000+pow(states[2]/constants[55], 3.00000))+ pow(constants[56], 3.00000)*states[5]*(1.00000+states[5]/constants[53])+ constants[54]*pow(states[2], 3.00000)+ pow(states[2], 3.00000)*constants[2]+ pow(constants[1], 3.00000)*states[5];
		algebraic[86] = (( constants[112]*constants[5]*pow(constants[60], constants[122])*algebraic[78]*(algebraic[80] - algebraic[83]))/algebraic[84])/(1.00000+ constants[57]*exp( (constants[58] - 1.00000)*states[0]*constants[121]));
		algebraic[105] = algebraic[34]+algebraic[37]+ 3.00000*algebraic[86]+ 3.00000*algebraic[41]+algebraic[74];
		algebraic[102] = ( constants[97]*states[4]*(constants[130] - states[34]) -  constants[96]*states[34])+( constants[99]*states[4]*(constants[132] - states[36]) -  constants[98]*states[36]);
		algebraic[64] = ( constants[50]*4.00000*states[0]*constants[109]*constants[121]*( 0.341000*states[4]*exp( 2.00000*states[0]*constants[121]) -  0.341000*constants[2]))/(exp( 2.00000*states[0]*constants[121]) - 1.00000);
		algebraic[69] =  constants[36]*algebraic[64]*states[16]*states[17]*((1.00000 - states[18])+constants[106])*pow(constants[52], constants[122])*0.450000*1.00000;
		algebraic[89] = ( constants[35]*pow(constants[64], constants[122])*constants[61]*pow(states[4], 1.60000))/(pow(constants[62], 1.60000)+pow(states[4], 1.60000));
		algebraic[30] =  ((1.00000/constants[121])/2.00000)*log(constants[2]/states[4]);
		algebraic[93] =  constants[35]*constants[63]*(states[0] - algebraic[30]);
		algebraic[107] = (algebraic[69]+algebraic[93]+algebraic[89]) -  2.00000*algebraic[85];
		algebraic[103] = ( constants[97]*states[5]*(constants[129] - states[35]) -  constants[96]*states[35])+( constants[99]*states[5]*(constants[131] - states[37]) -  constants[98]*states[37]);
		algebraic[65] = ( constants[50]*4.00000*states[0]*constants[109]*constants[121]*( 0.341000*states[5]*exp( 2.00000*states[0]*constants[121]) -  0.341000*constants[2]))/(exp( 2.00000*states[0]*constants[121]) - 1.00000);
		algebraic[70] =  constants[113]*algebraic[65]*states[16]*states[17]*((1.00000 - states[19])+constants[105])*pow(constants[52], constants[122])*0.450000*1.00000;
		algebraic[91] = ( constants[112]*pow(constants[64], constants[122])*constants[61]*pow(states[5], 1.60000))/(pow(constants[62], 1.60000)+pow(states[5], 1.60000));
		algebraic[32] =  ((1.00000/constants[121])/2.00000)*log(constants[2]/states[5]);
		algebraic[94] =  constants[112]*constants[63]*(states[0] - algebraic[32]);
		algebraic[108] = (algebraic[70]+algebraic[94]+algebraic[91]) -  2.00000*algebraic[86];
		algebraic[42] = algebraic[40]+algebraic[41];
		algebraic[26] =  (1.00000/constants[121])*log(constants[0]/states[3]);
		algebraic[43] = 1.00000/(1.00000+exp((states[0]+74.0000)/24.0000));
		algebraic[44] =  constants[103]*states[9]*algebraic[43]*(states[0] - algebraic[26]);
		algebraic[45] = 1.00000/(1.00000+exp(7.48800 - states[0]/5.98000));
		algebraic[46] =  constants[35]*constants[45]*algebraic[45]*(states[0] - algebraic[26]);
		algebraic[47] =  constants[112]*constants[45]*algebraic[45]*(states[0] - algebraic[26]);
		algebraic[48] = algebraic[46]+algebraic[47];
		algebraic[49] =  (1.00000/constants[121])*log((constants[0]+ constants[44]*constants[1])/(states[3]+ constants[44]*states[11]));
		algebraic[50] =  constants[35]*constants[104]*pow(states[10], 2.00000)*(states[0] - algebraic[49]);
		algebraic[51] =  constants[112]*constants[11]*pow(states[10], 2.00000)*(states[0] - algebraic[49]);
		algebraic[52] = algebraic[50]+algebraic[51];
		algebraic[53] =  constants[114]*states[12]*states[13]*(states[0] - algebraic[26]);
		algebraic[54] =  constants[115]*states[14]*states[15]*(states[0] - algebraic[26]);
		algebraic[55] = algebraic[53]+algebraic[54];
		algebraic[56] = 1.02000/(1.00000+exp( 0.238500*((states[0] - algebraic[26]) - 59.2150)));
		algebraic[57] = ( 0.491240*exp( 0.0803200*((states[0]+5.47600) - algebraic[26]))+exp( 0.0617500*((states[0] - algebraic[26]) - 594.310)))/(1.00000+exp( - 0.514300*((states[0] - algebraic[26])+4.75300)));
		algebraic[58] = algebraic[56]/(algebraic[56]+algebraic[57]);
		algebraic[59] =  1.00000*constants[13]* pow((constants[0]/5.40000), 1.0 / 2)*algebraic[58]*(states[0] - algebraic[26]);
		algebraic[66] = ( constants[51]*states[0]*constants[109]*constants[121]*( 0.750000*states[3]*exp( states[0]*constants[121]) -  0.750000*constants[0]))/(exp( states[0]*constants[121]) - 1.00000);
		algebraic[72] =  algebraic[66]*states[16]*states[17]*( constants[36]*(constants[106]+(1.00000 - states[18]))+ constants[113]*(constants[105]+(1.00000 - states[19])))*pow(constants[52], constants[122])*0.450000*1.00000;
		algebraic[106] = ((algebraic[55]+algebraic[44]+algebraic[52]+algebraic[59]) -  2.00000*algebraic[42])+algebraic[72]+algebraic[48];
		algebraic[110] = algebraic[104]+algebraic[105];
		algebraic[60] =  (( constants[35]*constants[46])/(1.00000+constants[48]/states[4]))*(states[0] - constants[134]);
		algebraic[61] =  (( constants[112]*constants[46])/(1.00000+constants[48]/states[5]))*(states[0] - constants[134]);
		algebraic[62] = algebraic[60]+algebraic[61];
		algebraic[63] =  constants[47]*(states[0] - constants[134]);
		algebraic[111] = algebraic[62]+algebraic[63];
		algebraic[112] = algebraic[107]+algebraic[108];
		algebraic[113] = algebraic[110]+algebraic[111]+algebraic[112]+algebraic[106];
		algebraic[109] = (VoI -  floor(VoI/constants[17])*constants[17]>=constants[16]&&VoI -  floor(VoI/constants[17])*constants[17]<=constants[16]+constants[18] ? constants[19] : 0.00000);
		algebraic[35] = algebraic[33]+algebraic[34];
		algebraic[38] = algebraic[36]+algebraic[37];
		algebraic[71] = algebraic[69]+algebraic[70];
		algebraic[75] = algebraic[73]+algebraic[74];
		algebraic[77] = algebraic[71]+algebraic[72]+algebraic[75];
		algebraic[87] =  3.00000*algebraic[85]+ 3.00000*algebraic[40]+algebraic[73];
		algebraic[88] = algebraic[85]+algebraic[86];
		algebraic[90] =  3.00000*algebraic[86]+ 3.00000*algebraic[41]+algebraic[74];
		algebraic[92] = algebraic[89]+algebraic[91];
		algebraic[95] = algebraic[93]+algebraic[94];
	}

};
